<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-24T08:23:02-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chris K. W.</title><subtitle>Computer stuff and things tangentially related to computer stuff</subtitle><entry><title type="html">Hyper-Wordle strategies</title><link href="http://localhost:4000/2025/08/24/Hyper-Wordle/" rel="alternate" type="text/html" title="Hyper-Wordle strategies" /><published>2025-08-24T00:00:00-07:00</published><updated>2025-08-24T00:00:00-07:00</updated><id>http://localhost:4000/2025/08/24/Hyper-Wordle</id><content type="html" xml:base="http://localhost:4000/2025/08/24/Hyper-Wordle/">&lt;p&gt;If you’ve fallen far enough down the Wordle rabbit hole you may have heard of &lt;a href=&quot;https://dordlewordle.com/&quot;&gt;Dordle&lt;/a&gt;,
a version of Wordle where you solve two words at once. If you’re looking for more of a challenge,
Merriam-Webster has you covered with &lt;a href=&quot;https://www.merriam-webster.com/games/quordle/#/&quot;&gt;Quordle&lt;/a&gt;,
where you solve four words at once. Of course any Wordler worth their salt should be able
to handle eight words, like in Britannica’s &lt;a href=&quot;https://www.britannica.com/games/octordle/&quot;&gt;Octordle&lt;/a&gt;.
And if you want to do sixteen words at once, you’re spoiled for choice between &lt;a href=&quot;https://sedecordlegame.org/&quot;&gt;Sedecordle&lt;/a&gt;
and &lt;a href=&quot;https://quordle-wordle.com/hexadecordle&quot;&gt;Hexadecordle&lt;/a&gt;. And no, it doesn’t &lt;a href=&quot;https://duotrigordle.com/&quot;&gt;stop&lt;/a&gt; &lt;a href=&quot;https://64ordle.au/&quot;&gt;there&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://64ordle.au/&quot;&gt;&lt;img src=&quot;/images/wordle/64-dle.jpg&quot; alt=&quot;What hath God wrought?&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;Sexaginta-quattuordle isn’t real, it can’t hurt yo–&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One logical extreme of this trend would be to take the &lt;a href=&quot;https://scourway.com/wordle/zez8el/wordle-answers-list-2315-words-5-letters&quot;&gt;list of 2315 valid secret words&lt;/a&gt;
to create duomilia-trecenti-quindecordle, where each day the puzzle is a different permutation of those 2315&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; words.
Despite how chaotic the user interface would need to be, this variant wouldn’t be much of a challenge: since
the same guess is applied to &lt;em&gt;all&lt;/em&gt; 2315 words every turn, entering each of the 2315 secret words
in any order will always solve it with a perfect score of 2315 guesses.&lt;/p&gt;

&lt;p&gt;But what if you could enter &lt;em&gt;different&lt;/em&gt; guesses for each of the 2315 secrets each turn?
I call this Hyper-Wordle, since it can be viewed as an exponentially larger
version of normal Wordle:&lt;/p&gt;

&lt;style&gt;
table{
    border-spacing: 50px;
    border:1px solid #000000;
}

th{
    border: 1px solid #000000;
    padding: 3px;
    max-width: 40vw;
}

td{
    border:1px solid #000000;
    padding: 3px;
    max-width: 40vw;
}
&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Normal Wordle&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Hyper-Wordle&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Secrets are chosen from the &lt;script type=&quot;math/tex&quot;&gt;2315&lt;/script&gt; possible 5-letter secret words.&lt;/td&gt;
      &lt;td&gt;Secrets are chosen from the &lt;script type=&quot;math/tex&quot;&gt;2315!&lt;/script&gt; possible permutations of 5-letter secret words.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Guesses are chosen from &lt;script type=&quot;math/tex&quot;&gt;12972&lt;/script&gt; possible 5-letter words.&lt;/td&gt;
      &lt;td&gt;Guesses are chosen from &lt;script type=&quot;math/tex&quot;&gt;12972^{2315}&lt;/script&gt; permutations (with replacement) of possible 5-letter words.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Feedback is given in the form of &lt;script type=&quot;math/tex&quot;&gt;5&lt;/script&gt; colored squares.&lt;/td&gt;
      &lt;td&gt;Feedback is given in the form of &lt;script type=&quot;math/tex&quot;&gt;5 \times 2315 = 11575&lt;/script&gt; colored squares.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Your score is the number of 5-letter guesses needed to identify the secret.&lt;/td&gt;
      &lt;td&gt;Your score is the total number of 5-letter guesses needed to identify each word in the secret permutation.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Believe it or not, this is a real Wordle variant I ran into back in 2022 &lt;a href=&quot;https://web.archive.org/web/20220521064114/https://botfights.ai/tournament/botfights_iv&quot;&gt;as part of a competition&lt;/a&gt;
to see who could write the best Wordle solving program. Originally, the competition
tested programs against a sample of 1000 words chosen randomly with replacement.
Since some secret words are easier to solve than others, you could spam submissions repeatedly
with a suboptimal strategy and eventually get lucky enough to beat better strategies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/hist.png&quot; style=&quot;max-height:50vh; width:auto;&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Central limit theory in action.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Testing against permutations of the 2315 secret words without replacement seemed like
it might negate any chance of abusing variance.
For example, if you used the optimal&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;a href=&quot;https://sonorouschocolate.com/notes/index.php/The_best_strategies_for_Wordle&quot;&gt;Wordle strategy starting with the word &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;&lt;/a&gt;
(average score of ≈3.4212 guesses) against every secret in the permutation,
submissions would score exactly &lt;script type=&quot;math/tex&quot;&gt;3.4212 \times 2315 = 7920&lt;/script&gt; regardless of the permutation
since every potential secret word always appears exactly once. Despite this,
there were still ways to introduce variance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/salet-reast-mix.jpg&quot; style=&quot;max-height:40vh; width:auto;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The histogram above shows the score distribution when using the optimal Wordle strategy
starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; (score of 7920) on half of the words in the permutation, and using the second best
strategy starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; (score of 7923) on the other half. Variance comes
from the fact that each strategy has its own strengths and weaknesses. For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; solves &lt;code class=&quot;highlighter-rouge&quot;&gt;SAUTE&lt;/code&gt; in 2 guesses, while &lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; solves it in 4.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; solves &lt;code class=&quot;highlighter-rouge&quot;&gt;ROUTE&lt;/code&gt; in 2 guesses, while &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; solves it in 4.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you spam enough submissions, you can retry until you’re tested against permutations where each
strategy covers for the other’s weaknesses, i.e. words like &lt;code class=&quot;highlighter-rouge&quot;&gt;SAUTE&lt;/code&gt; end up in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; half,
and words like &lt;code class=&quot;highlighter-rouge&quot;&gt;ROUTE&lt;/code&gt; end up in the &lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; half.&lt;/p&gt;

&lt;p&gt;While we could intentionally inject variance like this and spam submit,
there isn’t much merit in being the contestant who submits the most times. In particular,
the mixed strategy scores ≈7921.5 on average (the average of &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;’s score and &lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt;’s
score) which is worse than &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;’s score of 7920 by itself.
What if we could find a way to outperform the &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; strategy &lt;em&gt;on average&lt;/em&gt;? For example,
can we take advantage of the fact that the secrets are permuted &lt;em&gt;without replacement&lt;/em&gt; to
gain extra information?&lt;/p&gt;

&lt;h2 id=&quot;wacky-trick-leaks-extra-state&quot;&gt;Wacky Trick Leaks Extra State&lt;/h2&gt;

&lt;p&gt;Before we try to solve a permutation of 2315 words, let’s consider a simpler scenario
where we’re solving a permutation of six secret words in parallel:
&lt;code class=&quot;highlighter-rouge&quot;&gt;FIRST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DEUCE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;THIRD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FORTH&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FIFTH&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SIXTH&lt;/code&gt;. Let’s take a look at a strategy
where &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; is our starting word:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/leaks-tree.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note this is a deterministic strategy, meaning our guess for each word is
based solely on feedback we’ve received for the word so far. For example, we
guess &lt;code class=&quot;highlighter-rouge&quot;&gt;THIRD&lt;/code&gt; in all three positions where the feedback from the first guess was five gray squares.
While we show the secret words in order here, since the strategy is deterministic it always
requires a total of 15 guesses to solve all the words regardless of how they’re permuted. Next,
consider a strategy with &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; as our starting word:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-tree.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, this deterministic strategy requires 15 guesses to solve any permutation of the 6 chosen secret words.
Nether the &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; strategy nor &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; strategy are particularly impressive on their own. Let’s
try to solve an unknown permutation of our secret words while mixing the two starting words,
with &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; for the first three positions and &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; for the last three:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-leaks-0.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To put you in the mindset of the puzzle, the actual value of each secret word is kept, well, secret.
The only information you have is that each of the six secret words appears
only once, but can be in any order. The possibilities column lists the possible secret
words which can be in a position based on the feedback from guess 1,
using &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; as shorthand for &lt;code class=&quot;highlighter-rouge&quot;&gt;FIRST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DEUCE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;THIRD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FORTH&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;FIFTH&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SIXTH&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Before we make any more guesses, is there anything we can do to narrow down the values in
the possibilities column? Looking closely, we already know the position of &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;: it
&lt;em&gt;must&lt;/em&gt; be in the fourth position, since it’s the only secret which matches that feedback pattern
for &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt;. This allows us to remove &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; from the lists of possibilities in the first
two positions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-leaks-1.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we’ve removed &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; as a possibility in the first and second positions, we see
the first position must be either &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;. Consider the following two scenarios:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; is in the first position, &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; must be in the second position, since there would be
no other option that could go there.&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; is in the first position, &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; must be in the second position, since there would be
no other option that could go there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Sudoku&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; puzzles this is known as a &lt;a href=&quot;https://www.sudokuwiki.org/naked_candidates&quot;&gt;Naked Pair&lt;/a&gt;.
While we don’t know which of the two scenarios we’re in yet, in every scenario &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;
must be in the first two positions, allowing us to rule them out from any other position:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-leaks-2.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this deduction, we know &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; must be in the fifth position, since it’s the only viable
option. This allows us to remove it from the list of possibilities for the third
position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-leaks-3.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By the same logic, &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; must be in the third position, and we can remove it from the
possibilities for the sixth position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-leaks-4.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can deduce &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; must be in the sixth position. Initially we only knew the position
of &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;, however after applying deductions we learn the exact position of four out of the six
secrets! If we submit guesses tuned to take advantage of our updated knowledge:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/major-leaks-solve.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re able to solve every word in a total of 13 guesses, an improvement over 15 guesses
for both the &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; strategy and the &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; strategy on their own.
Taking a step back, where did this improvement come from? Like with the &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt;
example from earlier, the individual &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; strategies each have their
own strengths and weaknesses:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; always knows the location of &lt;code class=&quot;highlighter-rouge&quot;&gt;FORTH&lt;/code&gt; after submitting guess 1, while &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt;
doesn’t find this out until after guess 2.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; always knows the location of &lt;code class=&quot;highlighter-rouge&quot;&gt;DEUCE&lt;/code&gt; after submitting guess 1, while &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt;
doesn’t find this out until after guess 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the example we worked through above, notice how the first deduction uses information
from the &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; half of the puzzle to rule out the location of &lt;code class=&quot;highlighter-rouge&quot;&gt;DEUCE&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;) in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; half of the puzzle earlier than usual. In other words, &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt;’ strength covers for &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt;’s
weakness, which in turn gives &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; enough information to cover &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt;’ weaknesses.
By exploiting the asymmetry in the strengths and weaknesses of each strategy,
we’re able to iteratively refine both strategies to perform &lt;em&gt;better&lt;/em&gt; than the sum of their parts!&lt;/p&gt;

&lt;p&gt;We can brute force over all &lt;script type=&quot;math/tex&quot;&gt;6! = 720&lt;/script&gt; possible permutations
of our secret words to build up a histograms showing how much improvement deduction gives us on average:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/histograms.jpg&quot; style=&quot;max-height:30vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left, we have the result of mixing the two strategies without using any deduction
tricks. This produces a vaguely Gaussian looking distribution averaging a score of 15,
the same as using &lt;code class=&quot;highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt; on their own.
On the right, we have the result of mixing the two strategies and using
deduction tricks to refine our guesses with an average score of 13.9, a 1.1 point improvement!&lt;/p&gt;

&lt;h2 id=&quot;widen-scope&quot;&gt;Widen Scope&lt;/h2&gt;

&lt;p&gt;Now that we’ve seen this work with permutations of six secret words, let’s see how we
do against permutations of the complete list 2315 secret words. We can start off with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; mixed strategy we showed earlier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/salet-reast-hist.jpg&quot; style=&quot;max-height:40vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The values on the right are the same from earlier, showing the score distribution of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt;
mixed strategy on 1000 random permutations of the 2315 secret words.
On the left we have the results on the same 1000 permutations after eliminating possible
states via deduction each turn and refining our guessing strategy accordingly. Deduction takes our
average score from 7921.5 to 7768.8, a 150 point improvement!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; were chosen since they’re the top two deterministic Wordle strategies,
but what about mixing other strategies? During the competition, the best combination of
strategies I found was by assigning 10% of the permutation to each of the top 10
Wordle starting words: &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CRATE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SLATE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CRANE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CARLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SLANE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CARTE&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;TORSE&lt;/code&gt;. Plotting this against the previous two histograms:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/top-10-hist.jpg&quot; style=&quot;max-height:40vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The top 10 mix with deduction is shown in green with an average
score of 7628.0, an additional 130 point improvement over the &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;REAST&lt;/code&gt; deduction strategy!
Trying to mix in more words (e.g. top 20) seems to have diminishing returns, since introducing
less efficient starting words drags the expected score without deductions up.
The top 10 mixed strategy is what I ultimately used in the competition mentioned earlier, &lt;a href=&quot;https://web.archive.org/web/20220628055213/https://botfights.ai/leaderboard/botfights_iv?results=1&quot;&gt;winning
with a score of 7574&lt;/a&gt;
– a 4.4% improvement over the optimal Wordle strategy!&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;

&lt;p&gt;If you want to tinker with ideas, I
generated all the data for the strategy histograms in this post using &lt;a href=&quot;https://github.com/ckw017/hyper-wordle&quot;&gt;this very adhoc Rust code&lt;/a&gt;.
Some interesting open questions are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What’s the best mix of two starting words (i.e. lowest average score)? Intuitively,
some starting words might “synergize” with each other better than others if
the structure of their decision trees tend to lead to more deductions.&lt;/li&gt;
  &lt;li&gt;My winning strategy only behaves non-deterministically on the first turn, when we randomly
use 10 different guesses despite every word having identical feedback at that point (i.e.
no feedback). Can we get further improvements by behaving non-deterministically on later
turns?&lt;/li&gt;
  &lt;li&gt;The deduction strategy only removes words from the possibility pool when we’re &lt;em&gt;certain&lt;/em&gt;
they must be somewhere else. Is there a way to “fuzzily” refine our possibilities
to values other than 0, e.g. “this word is likely to be in position A,
so it’s less likely to be in position B”?&lt;/li&gt;
  &lt;li&gt;In the version of Hyper-Wordle played in this writeup, guesses are permutations with replacement.
What do strategies look if we limit guesses to be permutations &lt;em&gt;without&lt;/em&gt; replacement?&lt;/li&gt;
  &lt;li&gt;Are there any other games/scenarios where combining multiple suboptimal strategies outcompetes
a strategy which would normally be stronger?&lt;/li&gt;
  &lt;li&gt;Should I find less convoluted things to do with my free time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you enjoyed reading this, this entire writeup was actually much longer before
I broke it into three standalone parts. Excluding the one you’re reading right now, the other two
are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2025/08/11/Wine/&quot;&gt;The Sixteen Bottles of Wine Riddle&lt;/a&gt; – I thought of this riddle while trying to think of a
simpler version Hyper-Wordle to use as a toy example to introduce some concepts. Despite
trying to make it as simple and symmetric as possible, it still ended up having a surprising
amount of depth!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2025/08/23/Wordle/&quot;&gt;Writing Wordle bots for fun and profit&lt;/a&gt; – This gives some context
on some of the other stages of the Wordle strategy competition, which I also happened
to win. No novel discoveries to share there, but it’s a fun story anyway if you’re into
Wordle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway, thanks for reading!&lt;/p&gt;

&lt;!--

The example given only considers mixing two strategies, however my best submission involved mixing the ten best strategies and sharing information between them, netting a score of 7574, a 4.4% improvement over the best performance for a single deterministic strategy. I found mixing more than ten strategies started to yield diminishing returns. Possible explanations for this are:
* As we introduce more strategies, we need to involve &quot;worse&quot; starting words (strategies in the top 10 are mostly good, strategies in the top 50 not so much). This makes it harder for the new strategy to reveal enough useful information to other strategies to compensate for how bad it is in isolation
* The more strategies we introduce, the lower the chance any single strategy has enough &quot;samples&quot; to reveal actionable information

## Open questions

Anyway, this was enough to secure the win for the final Wordle competition, and leads to some interesting open questions:
* The information sharing strategy described only removes words from the pool of strategy if we're *certain* that the word is already somewhere else. In reality, you might be able to determine the probability a word is somewhere based on how many valid spots it can be in, and use this information when doing the next round's guesses.
* What's the best mix of two starting words (nets lowest expected number of guesses)? I imagine this is harder than just mixing the two best strategies -- some strategy pairs might have better &quot;synergy&quot;, i.e. reveal information others might find &quot;useful&quot; more frequently. For what it's worth, I'm pretty sure computing this exactly is extremely intractable, but I'm frequently wrong about this sort of thing.
* What's the optimal mix of any number of starting words? (Probably super-duper intractable)
* My last submission only mixed strategies during the first turn. Can we do better by mixing strategies on other turns as well?
* Other than the information sharing at the end of each round, the strategies act entirely independently. Can the strategies somehow leverage knowledge about what the other strategies will do to adjust their own guesses, essentially betting the other strategies are likely to uncover extra info?
* Are there any other games/scenarios with analogous properties to this kind of Wordle, i.e. where running multiple suboptimal strategies outcompetes a single strategy?
* Should I find less convoluted things to do in my free time?

--&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;2315 was the original number of Wordle secret words. After the New York Times acquired
Wordle, it was revised down to only 2309 secret words. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;

      &lt;p&gt;Leading with &lt;code class=&quot;highlighter-rouge&quot;&gt;SALET&lt;/code&gt; was the best strategy in early 2022, but since the New York Times changed
the word list and secret list after acquiring Wordle, it is &lt;a href=&quot;https://sonorouschocolate.com/notes/index.php/The_best_strategies_for_Wordle,_part_2#Updated_best_starting_words_using_New_York_Times_word_lists_as_of_30_August_2022&quot;&gt;no longer optimal&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;

      &lt;p&gt;You can think of the deduction steps between guesses as very oblong Sudoku puzzles,
where instead of a 9x9 grid with uniqueness constraints on 1 to 9, you have a
2315x1 line with uniqueness constraints on 1 to 2315. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">If you’ve fallen far enough down the Wordle rabbit hole you may have heard of Dordle, a version of Wordle where you solve two words at once. If you’re looking for more of a challenge, Merriam-Webster has you covered with Quordle, where you solve four words at once. Of course any Wordler worth their salt should be able to handle eight words, like in Britannica’s Octordle. And if you want to do sixteen words at once, you’re spoiled for choice between Sedecordle and Hexadecordle. And no, it doesn’t stop there.</summary></entry><entry><title type="html">Writing Wordle bots for fun and profit</title><link href="http://localhost:4000/2025/08/23/Wordle/" rel="alternate" type="text/html" title="Writing Wordle bots for fun and profit" /><published>2025-08-23T00:00:00-07:00</published><updated>2025-08-23T00:00:00-07:00</updated><id>http://localhost:4000/2025/08/23/Wordle</id><content type="html" xml:base="http://localhost:4000/2025/08/23/Wordle/">&lt;p&gt;Shortly after &lt;a href=&quot;https://www.nytimes.com/games/wordle/index.html&quot;&gt;Wordle&lt;/a&gt; became an overnight
sensation, a natural question arose: what’s the best guessing strategy?
Many theories sprung up as people claimed to have found the optimal
way to beat Wordle, often times using the word optimal loosely. While scrolling through
the comments of one of these allegedly optimal Wordle posts I spotted &lt;a href=&quot;https://news.ycombinator.com/item?id=29928263#29928609&quot;&gt;a comment&lt;/a&gt;
promoting a botting competition to see who could put their money where their mouth was. &lt;!--more--&gt;
Scoring worked as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;For every submission, 1000 secret words would be chosen randomly with replacement from the set of 12972 valid Wordle words.&lt;/li&gt;
  &lt;li&gt;The bot picks a first guess for each of the 1000 words, and submits them as a batch.&lt;/li&gt;
  &lt;li&gt;The bot is given feedback about each guess in the form of green/yellow/gray positions.&lt;/li&gt;
  &lt;li&gt;This continues until the bot has correctly guessed each of the 1000 secrets.&lt;/li&gt;
  &lt;li&gt;The overall score is the total number of guesses used to determine all 1000 secrets&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this system, the best possible score would be 1000 if your bot somehow managed to
correctly guess each of the 1000 secrets on the first turn. Impossible, right?&lt;/p&gt;

&lt;h2 id=&quot;alls-fair-in-love-and-wordle&quot;&gt;All’s fair in love and Wordle&lt;/h2&gt;

&lt;p&gt;I normally don’t join competitions unless I’m pretty sure I can either win, or do
something funny (usually the latter). When I heard about the Wordle bot competition,
I had an idea for how to do both. In a past life I was a &lt;a href=&quot;/2021/07/02/Teaching/&quot;&gt;TA for a programming class&lt;/a&gt;
where I worked on autograding student submitted code. Running arbitrary
code from potentially adversarial students meant I had a great excuse to practice pentesting
on our grading infrastructure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/zoinks.jpg&quot; alt=&quot;Screenshot of autograder output, scored 1337 points out of 100&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Note to students: don’t try this sort of thing without permission : )&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My first instinct was to find a way to cheese the competition’s scoring system.
The contest came with a &lt;a href=&quot;https://github.com/botfights/botfights-sdk/&quot;&gt;Python SDK&lt;/a&gt;
for creating and submitting bots, and one &lt;del&gt;cursed&lt;/del&gt; neat utility in Python’s standard library
lets you inspect the call stack at runtime. For example, if we wanted a function that
conveniently always guessed the correct value of a secret stored two stack frames above
it, we could do something like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inspect&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outer_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer_frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running this in the SDK’s local testing mode yielded a perfect score of 1000! However upon submitting:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Creating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botfights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Fight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;botfights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fksbk7qu&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cheat.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'secret'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oof, what happened? I falsely assumed the contest would score submissions
by running the bot code in a server side environment, similar to
&lt;a href=&quot;https://www.gradescope.com/&quot;&gt;Gradescope&lt;/a&gt; or &lt;a href=&quot;https://www.kaggle.com/&quot;&gt;Kaggle&lt;/a&gt;. In
reality, the bot code was executed entirely client side while the secret words were kept
entirely on the server. At this point I had already sunk ten minutes of my life trying to secure
first place illegitimately, so naturally I decided to spend an entire weekend
getting first place legitimately. Of course with so many people claiming to already have the
optimal strategy, there was no way I could win. Right?&lt;/p&gt;

&lt;h2 id=&quot;heuristics-are-approximations&quot;&gt;Heuristics are approximations&lt;/h2&gt;

&lt;p&gt;Many of the people who claimed to have found the optimal strategy were &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_gain_(decision_tree)&quot;&gt;maximizing information gain&lt;/a&gt;
by guessing words which minimize the expected amount of &lt;a href=&quot;https://en.wikipedia.org/wiki/Entropy_(information_theory)&quot;&gt;Shannon entropy&lt;/a&gt;
once the guess’s feedback is returned. The popular math educator
&lt;a href=&quot;https://en.wikipedia.org/wiki/3Blue1Brown&quot;&gt;3Blue1Brown&lt;/a&gt; even uploaded an ambitiously titled
video “The mathematically optimal Wordle strategy” using this method:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=v68zYyaEmEA&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
&lt;img src=&quot;/images/wordle/woops2.jpg&quot; style=&quot;max-height:40vh; width:auto;&quot; alt=&quot;Thumbnail of a video titled The mathematically optimal Wordle strategy&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was retitled a few days later to &lt;a href=&quot;https://www.youtube.com/watch?v=v68zYyaEmEA&quot;&gt;“Solving Wordle using information theory”&lt;/a&gt;
when &lt;a href=&quot;https://www.youtube.com/watch?v=fRed0Xmc2Wg&quot;&gt;bugs in the original implementation&lt;/a&gt;
were found. This is by no means a knock against 3Blue1Brown, and I highly recommend watching his video.
The rest of this section requires a high-level understanding of the information
theory behind Wordle, and the video does an incredible job of explaining it.&lt;/p&gt;

&lt;p&gt;The issue with the entropy heuristic is when a guess “partitions” the
possible values of the secret word based on feedback, the entropy formula assumes smaller partitions
are &lt;em&gt;always&lt;/em&gt; better than larger ones for getting closer to the answer. In reality, the
asymmetric nature of the English lexicon means some subsets of words are trickier to deal
with even if they have the same or fewer number of elements as another subset. Borrowing from
&lt;a href=&quot;https://alexpeattie.com/blog/establishing-minimum-guesses-wordle/&quot;&gt;Alex Peattie’s elegant proof regarding minimizing maximum guesses&lt;/a&gt;,
imagine a scenario where the secret word has been narrowed down to four options:
&lt;code class=&quot;highlighter-rouge&quot;&gt;BILLS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CILLS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DILLS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GILLS&lt;/code&gt;. An optimal guess here is &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/subset-4.jpg&quot; style=&quot;max-height:25vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The feedback from guessing &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt; always gives us enough information to distinguish which of the
four is the secret word, allowing us to guess the correct word on the next turn. On average, we can solve this
subset of Wordle in exactly 2 guesses. Now consider the case where the
secret words are &lt;code class=&quot;highlighter-rouge&quot;&gt;WACKY&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TRICK&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LEAKS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EXTRA&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;STATE&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/subset-5.jpg&quot; style=&quot;max-height:29.5vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can immediately guess &lt;code class=&quot;highlighter-rouge&quot;&gt;EXTRA&lt;/code&gt;, which has a 20% chance of being correct, otherwise we
always receive enough information to get the correct answer on the second guess.
On average we can expect to solve the 5-word subset (2.3 bits of entropy)
in 1.8 guesses, an improvement over the 4-word subset (2 bits of entropy) in 2 guesses.
If we know the entropy minimization strategy isn’t necessarily optimal, what can we
do to improve it? My strategy was nearly identical to the entropy minimization strategy,
except it incorporated &lt;a href=&quot;https://en.wikipedia.org/wiki/Beam_search&quot;&gt;beam search&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Rather than greedily choosing the guess which minimizes entropy, we can instead explore the top N guesses
(ranked by entropy) and choose the one which ultimately minimizes the expected number of guesses
by recursively looking ahead in the decision tree.
This explores parts of the search space which superficially appear
worse but may be faster to solve, like in the 4-word vs. 5-word case. In practice,
a beam width of 50 is enough to correctly generate the optimal decision tree in classic Wordle (see &lt;a href=&quot;http://sonorouschocolate.com/notes/index.php?title=The_best_strategies_for_Wordle&quot;&gt;Alex Selby’s excellent write-up for details&lt;/a&gt;), though for the competition I only used 10.&lt;/p&gt;

&lt;h2 id=&quot;and-the-winner-is&quot;&gt;And the winner is…&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/wordle/winner.jpg&quot; style=&quot;max-height:20vh; width:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After three weeks, the contest ended and &lt;a href=&quot;https://web.archive.org/web/20220521050613/https://botfights.ai/tournament/botfights_i&quot;&gt;I came out on top&lt;/a&gt;! Nice, Although to be
take with a grain of salt. There were only 20 or so other competitors, many of whom
had converged on the same entropy minimization idea. A few of the other contestants
also discussed beam search but never implemented it, thinking it would be intractable in pure Python.
Their intuition was right, and my Python code was basically just a wrapper around a decision tree
precomputed in Rust with a handful of caching tricks so the strategy would be ready
before the heat death of the universe.&lt;/p&gt;

&lt;p&gt;Over the next couple of weeks, &lt;a href=&quot;https://web.archive.org/web/20220521065315/https://botfights.ai/tournament/botfights_ii&quot;&gt;Botfights II&lt;/a&gt;
and &lt;a href=&quot;https://web.archive.org/web/20220521055448/https://botfights.ai/tournament/botfights_iii&quot;&gt;Botfights III&lt;/a&gt;
began, which used 6-letter words and arbitrary length words as secrets respectively. In
both cases I won by reusing the same beam search approach to get
reasonably effective decision trees that outperformed the greedy entropy minimization approach.
By then I had won about 60 bucks in Bitcoin as the organizer started the final competition…&lt;/p&gt;

&lt;p&gt;Continued in the next post: &lt;a href=&quot;/2025/08/24/Hyper-Wordle/&quot;&gt;Hyper-Wordle strategies&lt;/a&gt;.&lt;/p&gt;

&lt;!--
## Wacky trick leaks extra state

As you might guess, the next event was
[Botfights IV](https://web.archive.org/web/20220521064114/https://botfights.ai/tournament/botfights_iv).
Previous iterations of the contest kept things interesting by increasing the number of
potential hidden words. The twist in the final contest was a bit different:
* The contest would returned to the original list of 12972 five-letter words.
* All of the secret words were chosen from the 2315 words in the
  [secret list](https://www.wordunscrambler.net/word-list/wordle-word-list) which
  the original Wordle website used.
* Each submission was tested against all 2315 of the possible secret words (**sampled without
  replacement**). In other words, each submission was tested against a permutation of the
  2315 secret words.
* The 2315 secret words still needed to be solved &quot;in parallel&quot; (submit 2315 first guesses,
  receive 2315 pieces of feedback, submit 2315 second guesses, etc...).


I call this Hyper-Wordle, since it can be viewed as a much larger, much more intractable
version of normal Wordle:
--&gt;
&lt;style&gt;
table{
    border-spacing: 50px;
    border:1px solid #000000;
}

th{
    border: 1px solid #000000;
    padding: 3px;
    max-width: 40vw;
}

td{
    border:1px solid #000000;
    padding: 3px;
    max-width: 40vw;
}
&lt;/style&gt;

&lt;!--
| **Wordle**                                                                   | **Hyper-Wordle**                                                                                          |
|------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|
| Secrets are chosen from the $$2315$$ possible 5-letter secret words.     | Secrets are chosen from the $$2315!$$ possible permutations of 5-letter secret words.                 |
| Guesses can be chosen from $$12972$$ possible 5-letter words.            | Guesses can be chosen from $$12972^{2315}$$ possible permutations with repetition of 5-letter words. |
| Feedback is given in the form of 5 colored squares.                      | Feedback is given in the form of $$5 \times 2315 = 11575$$ colored squares.                           |
| Your score is the number of guesses needed to identify the secret.       | Your score is the sum of the number of guesses needed to identify every word in the secret permutation.      |

--&gt;
&lt;!--
# Retrospective: was all of this effort worth it?

Probably not, although a handful of good things came out of it:
* It gave me some funny stories and something worth doing a writeup on.
* I received some prize money for winning each of the competitions, about $80 of BTC in total. In itself this isn't worth a ton to me, but watching it decay in value by 55% in the first few months after receiving it was a neat lesson in cryptocurrency volatility, without having to stake any of my own money.
* Inspired me to write the 16 bottles of wine riddle.

On the downside, I now have an overwhelming amount of incredibly useless knowledge about
optimal Wordle. While I'd heard the phrase &quot;cursed for knowledge&quot; before, I never
truly understood it until Wordle came up while I was getting my teeth cleaned:

**Oral Hygienist**: Have you heard of a game called Wordle? My whole family loves it!&lt;br&gt;
**Me**: Mhmha uhuh&lt;br&gt;
**Oral Hygienist**: My go to starting word is &quot;ocean&quot;, but my daughter always starts with &quot;raise&quot;&lt;br&gt;
**Me**: *Mentally gauging how hard it would be to talk about optimal Wordle strategies with a regular person*&lt;br&gt;
**Me**: Hmm mhm&lt;br&gt;

# Conclusion

Aiyah is a five-letter word.

# What is optimal Wordle?

I'm just going to assume you already know what Wordle is. But what is optimal Wordle? It turns out to be a controversial topic:
* Early in the year lots of posts started appearing on [Hacker News](https://news.ycombinator.com) about supposedly [optimal Wordle](https://towardsdatascience.com/optimal-wordle-d8c2f2805704) strategies. Many of these weren't really optimal, they just used reasonably effective heuristics based on letter distributions.
* Lots of debate was sparked over what it actually meant for a strategy to be optimal. Is it cheating to use the [secret list](https://www.wordunscrambler.net/word-list/wordle-word-list) of possible answers? Should we minimize the expected value of guesses needed? Or minimize the maximum number of guesses needed? What about hard mode?
* Lots of debate about if debating about what constitutes optimal Wordle is unproductive and if it ruins the point of Wordle.

One surprising event in all of this was when the popular math educator [3Blue1Brown](https://en.wikipedia.org/wiki/3Blue1Brown) uploaded an ambitiously titled video:

![Thumbnail of a video titled &quot;The mathematically optimal Wordle strategy&quot;](/images/wordle/woops.jpg)

 This was retitled a few days later to [Solving Wordle using information theory](https://www.youtube.com/watch?v=v68zYyaEmEA) when [bugs in the original implementation](https://www.youtube.com/watch?v=fRed0Xmc2Wg) were found, although even without the bugs the solution generated wasn't necessarily optimal. This isn't meant to be a knock at 3B1B, but rather an example of how tricky it is to get the definition right. In particular, the 3B1B video used a *very* effective heuristic to generate the decision tree, but at the end of the day heuristics usually aren't the real optimization criteria.

For real optimality results, Laurent Porrier compiled a [list of all the Wordle optimality results so far](https://www.poirrier.ca/notes/wordle-optimal/) which is still being actively updated as of when this is being written! In this post, optimal refers to any strategy that minimizes the expected number of guesses needed to solve a word uniformly sampled from the secret list, and with no limit on the number of guesses.


Probably not, although a handful of good things came out of it:
* I suspect that using Python has done irreparable damage to my ability to estimate just how fast things *can* be. The act of switching from Python to Rust without doing any application level optimization tricks sped up the time to build decision trees by an order of magnitude. It took me another hour before I recalled the words of my [government assigned Rust evangelist](https://twitter.com/exists_forall?lang=en): &quot;Did you remember to use the `--release` flag?&quot; This gave me another order of magnitude improvement for free, and was a nice wake-up call about just how slow Python is.
* It gave me a funny story and something worth doing a write-up on.
* I received some prize money for winning each of the competitions, about $80 of BTC in total. In itself this isn't worth a ton to me, but watching it decay in value by about 55% over the last few months was a valuable lesson in just how volatile cryptocurrency is, without having to stake any of my own money.

I suspect this might turn the game into an incredibly convoluted version of the [Monte Hall Problem](https://en.wikipedia.org/wiki/Monty_Hall_problem).

* What are the necessary conditions for mixed strategies to outperform a single strategy? One thought experiment is to imagine a version Wordle where every possible 26^5 letter combination is treated as valid word. My intuition here would be that this version would be too &quot;symmetric&quot; to beat

* I suspect that using Python has done irreparable damage to my ability to estimate just how fast things *can* be. The act of switching from Python to Rust without doing any application level optimization tricks sped up the time to build decision trees by an order of magnitude. It took me another hour before I recalled the words of my [government assigned Rust evangelist](https://twitter.com/exists_forall?lang=en): &quot;Did you remember to use the `--release` flag?&quot; This gave me another order of magnitude improvement for free, and was a nice wake-up call about just how slow Python is.
--&gt;</content><author><name></name></author><summary type="html">Shortly after Wordle became an overnight sensation, a natural question arose: what’s the best guessing strategy? Many theories sprung up as people claimed to have found the optimal way to beat Wordle, often times using the word optimal loosely. While scrolling through the comments of one of these allegedly optimal Wordle posts I spotted a comment promoting a botting competition to see who could put their money where their mouth was.</summary></entry><entry><title type="html">Sixteen bottles of wine riddle</title><link href="http://localhost:4000/2025/08/11/Wine/" rel="alternate" type="text/html" title="Sixteen bottles of wine riddle" /><published>2025-08-11T00:00:00-07:00</published><updated>2025-08-11T00:00:00-07:00</updated><id>http://localhost:4000/2025/08/11/Wine</id><content type="html" xml:base="http://localhost:4000/2025/08/11/Wine/">&lt;p&gt;Imagine the typical everyday scenario in which you have been imprisoned in the wine cellar
of an evil combinatorialist. She promises to let you go, but only if you can solve her riddle.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Is it the one where there are &lt;a href=&quot;https://www.geeksforgeeks.org/aptitude/puzzle-19-poison-and-rat/&quot;&gt;1000 barrels of wine and one of them is poisoned&lt;/a&gt;?”&lt;/p&gt;

  &lt;p&gt;“Uh, maybe? Do you already know the answer to that one?”&lt;/p&gt;

  &lt;p&gt;“…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re lead past a conspicuous amount of barrels and into a new room where you’re given a bottle
of wine and four measuring devices. The combinatorialist explains that the wine is from one of sixteen possible years,
however the label is missing. Each measuring device will output either a 0 or a 1 depending on what year the wine is from.
Your goal is to identify the year while doing as few measurements
as possible. The combinatorialist explains what each device outputs using a table:&lt;/p&gt;

&lt;style&gt;
table{
    border-spacing: 50px;
    border:1px solid #000000;
}

th{
    border:1px solid #000000;
    padding: 1.5px
}

td{
    border:1px solid #000000;
    padding: 1.5px
}
&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Device 3&lt;/th&gt;
      &lt;th&gt;Device 2&lt;/th&gt;
      &lt;th&gt;Device 1&lt;/th&gt;
      &lt;th&gt;Device 0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You briefly wonder how she managed to procure wine from over 2000 years ago before recalling
that the wine cellar was built deep inside of a hypothetical scenario.
Looking closely, you notice that each device tells you one bit of information about the year.
For example, 1101 in binary can be converted to 13 in decimal. You measure the wine with
devices 3, 2, 1 and 0 which output 0, 1, 1 and 0 respectively. Converting 0110 from binary
to a decimal you arrive at the answer of 6. The combinatorialist nods.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“So, can I leave now?”&lt;/p&gt;

  &lt;p&gt;“Hahaha – no. That was just an apéritif.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The combinatorialist reveals 16 new unlabeled bottles and explains that &lt;u&gt;each wine is
from a different year from 0 to 15&lt;/u&gt;. Once again your task is to identify the year
of each bottle of wine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Am I allowed to mix samples from different bottles to try to measure them simultaneously?”&lt;/p&gt;

  &lt;p&gt;“No, the measuring devices explode instantly if they’re used on any mix of wines.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before you have a chance to question how and why the devices would explode, your captor
gives you one final condition: &lt;u&gt;Identify all 16 of the wines in a total of 50 measurements or less.&lt;/u&gt;
Is there a strategy you can follow that is guaranteed to succeed?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is designed to be solvable without a computer (e.g. you don’t need to do any programmatic brute forcing).&lt;/em&gt;
&lt;em&gt;Spoilers for the solution are below the following image.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wine/spoilerwall.jpg&quot; style=&quot;max-height:75vh; width:auto;&quot; alt=&quot;Photo of a wine glass on top of a 7x7x7 Rubik's cube and a wine bottle with a question mark on the label.&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;a-solution&quot;&gt;A solution&lt;/h1&gt;

&lt;p&gt;Since identifying one bottle of wine requires 4 measurements, it appears
you would need &lt;script type=&quot;math/tex&quot;&gt;4 \times 16 = 64&lt;/script&gt; measurements to identify all 16 bottles of wine.
The trick here is that each wine is from a different year. Without the uniqueness constraint
there would be &lt;script type=&quot;math/tex&quot;&gt;16^{16}&lt;/script&gt; possible states (64 bits of entropy), while with the uniqueness
constraint there are &lt;script type=&quot;math/tex&quot;&gt;16!&lt;/script&gt; possible states (≈44.25 bits of entropy), i.e. the number
of ways to permute 16 objects. If we can find a way to take advantage of the uniqueness
constraint there’s a chance we can identify everything in 50 measurements or less.&lt;/p&gt;

&lt;h3 id=&quot;two-bottle-case&quot;&gt;Two bottle case&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Device 0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To start it might help to think of a much simpler case: say we’re only given two wines
and told that one is from the year 0 and the other is from year 1. Notice that if we can identify one
bottle, we can immediately deduce the identity of the other bottle without having to take
any additional measurements. In this case, we only need to do &lt;strong&gt;1 measurement&lt;/strong&gt; using device 0 to
identify both bottles.&lt;/p&gt;

&lt;h3 id=&quot;four-bottle-case&quot;&gt;Four bottle case&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Device 1&lt;/th&gt;
      &lt;th&gt;Device 0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Next, say we have four bottles from the years 0, 1, 2, and 3.
For convenience let’s call the wines &lt;script type=&quot;math/tex&quot;&gt;w_{00}, w_{01}, w_{10}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{11}&lt;/script&gt; respectively
based on the binary representations of their years.&lt;/p&gt;

&lt;p&gt;Let’s consider what would happen if we used device
1 to measure all four of the bottles. Since each of the four years appear exactly
once, device 1 should output 0 twice (for &lt;script type=&quot;math/tex&quot;&gt;w_{00}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{01}&lt;/script&gt;) and output
1 twice (for &lt;script type=&quot;math/tex&quot;&gt;w_{10}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{11}&lt;/script&gt;). Now that we know the two possible
positions of &lt;script type=&quot;math/tex&quot;&gt;w_{00}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{01}&lt;/script&gt;, we can use device 0 once to identify
both like in the two bottle case from earlier. Likewise we can use device 0 once on the
other pair to identify both &lt;script type=&quot;math/tex&quot;&gt;w_{10}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{11}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;This strategy would use 6 measurements: the 4 initial measurements with device 1
and the 2 measurements with device 0. Can we do better? Looking closely, we don’t actually
need to measure every bottle with device 1. Regardless of what order we measure the
bottles in, after three measurements with device 1 we will either observe:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Device 1 outputs 0 twice, and 1 once. By elimination measuring the fourth bottle would output 1.&lt;/li&gt;
  &lt;li&gt;Device 1 outputs 0 once, and 1 twice. By elimination measuring the fourth bottle would output 0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both cases we can infer what the fourth measurement would be
without actually using the device. Using this strategy we are guaranteed to identify
every bottle in &lt;strong&gt;5 measurements&lt;/strong&gt;: the 3 initial measurements with device 1 followed by 2 additional measurements with device 0.&lt;/p&gt;

&lt;h3 id=&quot;eight-bottle-case&quot;&gt;Eight bottle case&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Device 2&lt;/th&gt;
      &lt;th&gt;Device 1&lt;/th&gt;
      &lt;th&gt;Device 0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This time we have wine from the years 0, 1, 2, 3, 4, 5, 6 and 7 (let’s refer to them as
&lt;script type=&quot;math/tex&quot;&gt;w_{000}, w_{001}, w_{010}, w_{011}, w_{100}, w_{101}, w_{110}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{111}&lt;/script&gt;).
Starting with device 2, we can reuse the trick from earlier and measure seven of the bottles.
The two cases are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Device 2 outputs 0 four times, and 1 three times. By elimination measuring the eighth bottle would output 1.&lt;/li&gt;
  &lt;li&gt;Device 2 outputs 0 three times, and 1 four times. By elimination measuring the eighth bottle would output 0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know what device 2 would output for every bottle, we can subdivide the problem
into two groups:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;w_{000}, w_{001}, w_{010}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{011}&lt;/script&gt; comprise the bottles that device 2 would output 0 for.&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;w_{100}, w_{101}, w_{110}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;w_{111}&lt;/script&gt; comprise the bottles that device 2 would output 1 for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that we can reuse our strategy from the four bottle case on each group to determine the
identity of every bottle. In total we are guaranteed to identify every bottle in &lt;strong&gt;17 measurements&lt;/strong&gt;:
7 initial measurements from device 2, and 5 additional measurements for each of the two groups.&lt;/p&gt;

&lt;h3 id=&quot;sixteen-bottle-case&quot;&gt;Sixteen bottle case&lt;/h3&gt;

&lt;p&gt;We can use device 3 on fifteen of the bottles and subdivide the problem into two
groups of eight bottles based on device 3’s outputs. If we reuse the strategy from the eight bottle case
on each group we get a total of 15 + 17 + 17 = &lt;strong&gt;49 measurements&lt;/strong&gt;, just below the
evil combinatorialist’s threshold of 50. You’re free!&lt;/p&gt;

&lt;h1 id=&quot;visualization&quot;&gt;Visualization&lt;/h1&gt;

&lt;p&gt;One way to visualize this is to watch how the probabilities that a wine is in
a certain position change as we make observations. Under the hood we can
compute this by looping through every permutation and counting how many are still possible
given the observations we’ve made so far. In the following grids, each column represents a bottle and the measurements we’ve performed
on it. Each row represents what year the wine in those bottles might be. The cells in the grid grow
darker or lighter as the probability that a year is in a given position increases or decreases.&lt;/p&gt;

&lt;video controls=&quot;controls&quot; style=&quot;outline:none; max-width: 100%;&quot;&gt;
  &lt;source src=&quot;/images/wine/random.mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;You may have noticed earlier that we can save additional measurements if we get lucky
on the order certain values are output. For example, in the eight bottle case we don’t always
need to perform seven measurements with device 2, we can quit as soon as we see either four 1’s
or four 0’s (the above animation reaches four 0’s on the sixth measurement).
The following animation shows a “lucky” run where we skip as many measurements as possible:&lt;/p&gt;

&lt;video controls=&quot;controls&quot; style=&quot;outline:none; max-width: 100%;&quot;&gt;
  &lt;source src=&quot;/images/wine/never-punished.mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Surprisingly, if we’re lucky it’s possible to identify every bottle in only 12 measurements
despite there being &lt;script type=&quot;math/tex&quot;&gt;8! = 40320&lt;/script&gt; possible states (≈15.3 bits of entropy). At first glance
each measurement looks like it can resolve at most 1 bit of entropy since each one literally
reveals 1 bit. However certain combinations of measurements and outputs are worth more
than the sum of their parts. In the case of getting lucky on the eight bottle case and having
the first four bottles all have the same highest order bit, we go from &lt;script type=&quot;math/tex&quot;&gt;8!&lt;/script&gt; states to
&lt;script type=&quot;math/tex&quot;&gt;4!4! = 576&lt;/script&gt; states (≈9.17 bits of entropy), meaning each of the four measurements
resolves an average of roughly 1.5 bits of entropy.&lt;/p&gt;

&lt;h2 id=&quot;optimality&quot;&gt;Optimality&lt;/h2&gt;

&lt;p&gt;The “divide and conquer” approach of forming subgroups and recursing on them has an
elegant feel to it, but sadly it doesn’t appear to be optimal. I don’t actually know what the optimal
strategy is, but I threw together a greedy approach that always performs the measurement
with the higest expected information gain which outperforms the
divide and conquer approach in the eight bottle case (computing the
expected information gain with sixteen bottles is tricky due to the sheer size of the state space).
On average it identifies all the wine bottles in 15.48 measurements, a slight improvement
over divide and conquer’s 15.73 measurements.&lt;/p&gt;

&lt;video controls=&quot;controls&quot; style=&quot;outline:none; max-width: 100%;&quot;&gt;
  &lt;source src=&quot;/images/wine/greed.mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;&lt;em&gt;Greedy information gain strategy.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figuring out the actual optimal strategy (in terms of number of measurements needed across all possible
permutations) in the eight and sixteen bottle case is left as an exercise to the reader ;)&lt;/p&gt;

&lt;h1 id=&quot;miscellaneous-thoughts&quot;&gt;Miscellaneous thoughts&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;I feel moderately guilty about releasing a new contrived interviewesque
question into the atmosphere. The silver lining is I would find it really funny if I get asked this
question in an interview some day.&lt;/li&gt;
  &lt;li&gt;While doing this writeup OpenAI released GPT-5, giving a nice opportunity to &lt;a href=&quot;https://chatgpt.com/share/68970b7f-c1e8-8012-bd16-5e39743ab521&quot;&gt;see how an
LLM would do&lt;/a&gt; against a
riddle that hasn’t been publicized anywhere. After thinking for 50 seconds it comes to the
expected answer of 49 guesses, but then immediately fumbles it in step A by wasting 3 measurements
and flounders to compensate for the wasted measurements in step C – maybe
an artifact of the sequential nature in which LLMs generate output.&lt;/li&gt;
  &lt;li&gt;If you squint at the intended solution, it’s kinda like radix sort.&lt;/li&gt;
  &lt;li&gt;Is there a strategy that guarantees you identify every bottle in 48 or less guesses? This would require either:
    &lt;ul&gt;
      &lt;li&gt;Lowering the upper bound on the 8 bottle case.&lt;/li&gt;
      &lt;li&gt;Squeezing out better opportunities to gain information in the 16 bottle case.&lt;/li&gt;
      &lt;li&gt;Can we find/prove these kinds of results in the 32, 64, 128, etc… cases? I deliberately
chose 16 wine bottles for this writeup since its just past the threshold where brute force
searching through state space becomes intractable for the average mortal, and requires
some pen and paper analysis.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A 16x16 grid visualization wasn’t possible because trying to calculate the
density at each spot in the grid is, to my knowledge, intractable and boils down to
computing &lt;a href=&quot;https://en.wikipedia.org/wiki/Permanent_(mathematics)#Enumeration&quot;&gt;the permanent&lt;/a&gt;
of certain matrices. My best guess to approximate the values would be by throwing the grid into
&lt;a href=&quot;https://www.cvxpy.org/&quot;&gt;cvxpy&lt;/a&gt; and telling it to:
    &lt;ul&gt;
      &lt;li&gt;Maintain the constraints of a doubly stochastic matrix (non-negative entries, rows
  and columns each sum to 1)&lt;/li&gt;
      &lt;li&gt;Set entries that should be 0 based on direct observations to 0.&lt;/li&gt;
      &lt;li&gt;Maximize entropy under the prior constraints&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If someone smarter than me knows of a better approximation it would be handy for a different
problem I’ve been staring at. This puzzle was meant to be a toy example
in a &lt;a href=&quot;/2025/08/24/Hyper-Wordle/&quot;&gt;different writeup&lt;/a&gt; which involves a much larger, much less symmetric, slightly less
contrived problem. (Hint: what if the 16 wine bottles were, say, ~2300 5-letter words?).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Imagine the typical everyday scenario in which you have been imprisoned in the wine cellar of an evil combinatorialist. She promises to let you go, but only if you can solve her riddle.</summary></entry><entry><title type="html">That fractal that’s been up on my wall for 12 years</title><link href="http://localhost:4000/2025/05/21/Fractal/" rel="alternate" type="text/html" title="That fractal that's been up on my wall for 12 years" /><published>2025-05-21T00:00:00-07:00</published><updated>2025-05-21T00:00:00-07:00</updated><id>http://localhost:4000/2025/05/21/Fractal</id><content type="html" xml:base="http://localhost:4000/2025/05/21/Fractal/">&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Math, Handwaving&lt;/p&gt;

&lt;p&gt;I spent a lot of time doodling in middle school in lieu of whatever it is middle schoolers are
supposed to be doing. Somewhere between the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cool_S&quot;&gt;Cool S&lt;/a&gt;’s
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Penrose_triangle&quot;&gt;Penrose triangles&lt;/a&gt; I stumbled upon a neat
way to fill up graph paper by repeatedly combining and copying squares. I suspected there was
more to the doodle but wasn’t quite sure how to analyze it. Deciding to delegate to a future version of me that
knows more math, I put it up on the wall behind my desk where it has followed me from high
school to college to the present day.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/iter0to4.jpg&quot; alt=&quot;Static image of iterations 0 to 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, after a series of accidents I am now the prophesized future version of me that knows a bit more math.
Due to its petal-like blooming structure and timeless presence scotch taped to my wall I’ll be referring to the
fractal affectionately as “the wallflower,” although further down we’ll see it’s closely related
to some well-known fractals. To start investigating it might help to run through
the steps of how middle school me originally drew it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with a single square.&lt;/li&gt;
  &lt;li&gt;Tile four copies of the current state to the left, right, top, and bottom of the current state.&lt;/li&gt;
  &lt;li&gt;Tile four copies of the current state slightly angled (about 27 degrees clockwise) from the left, right, top, and bottom of the current state.&lt;/li&gt;
  &lt;li&gt;Alternate between steps 2 and 3 until you run out of graph paper.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In animated form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/wallflower.gif&quot; alt=&quot;Gif of the first 7 iterations of constructing the fractal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shoutout to &lt;a href=&quot;https://www.manim.community/&quot;&gt;manim&lt;/a&gt; and &lt;a href=&quot;https://www.3blue1brown.com/&quot;&gt;3Blue1Brown&lt;/a&gt; for making this and many other visualizations to come possible!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gosper_curve&quot;&gt;Gosper Curve&lt;/a&gt;, the steps can
be run repeatedly to eventually cover any part of the plane, and each intermediate state can tile the plane.
If you have graph paper and free time you can try out the steps for yourself – it’s fun to
translate and trace the contour of the previous state and watch things lock into place like a puzzle.
Alternatively, a bit over a year ago I realized you could
generate the contour using an &lt;a href=&quot;https://en.wikipedia.org/wiki/L-system&quot;&gt;L-System&lt;/a&gt;.
The rules are simple and consist of only 90 degree right (&lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;) and left (&lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;) turns:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with 4 right turns: &lt;script type=&quot;math/tex&quot;&gt;RRRR&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Each iteration run the following substitutions: &lt;script type=&quot;math/tex&quot;&gt;R \rightarrow RLR, L \rightarrow RLL&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, after applying the first iteration of substitutions you should have &lt;script type=&quot;math/tex&quot;&gt;RLRRLRRLRLR&lt;/script&gt;.
The following images demonstrate the first few applications of the rule:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/contouriter0to4.jpg&quot; alt=&quot;Static image of iterations 0 to 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yellow=next turn (going clockwise) will be to the left, Blue=to the right&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And in animated form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/contour.gif&quot; alt=&quot;Gif of the first 4 iterations of constructing the boundary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both methods end up generating equivale– hold up! When I first tried
the L-System method a year ago I &lt;em&gt;thought&lt;/em&gt; it generated the same contour as the wallflower.
In other words, I tried drawing the fourth iteration and its many right angles free
hand and gave up partway thinking “well it worked for the first 3 iterations, therefore it works in general &lt;script type=&quot;math/tex&quot;&gt;\text{Q.E.D.}&lt;/script&gt;”
It was only when I started making the animations for this post that I realized
the two don’t quite match up. Comparing the 4th iteration from each method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/woops.jpg&quot; alt=&quot;Annotated comparison between two different versions of fourth iteration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Side by side, the main difference between the two is how the “copies”
of the 3rd iteration are placed around the original in the center. The first method (let’s call it
“drag and drop”) places the copies directly above, below, etc… around the center, while
the L-System method places them diagonally. The contour produced by the L-System
approach is already documented in a few places:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Wikipedia article for &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_fractals_by_Hausdorff_dimension&quot;&gt;List of fractals&lt;/a&gt; (listed as “Quadratic von Koch island”)&lt;/li&gt;
  &lt;li&gt;Wikipedia article for &lt;a href=&quot;https://en.wikipedia.org/wiki/Koch_snowflake&quot;&gt;Koch snowflake&lt;/a&gt; (listed as “Quadratic Flake”, with file name “&lt;a href=&quot;https://imagej.net/ij/plugins/fractal-generator/index.html&quot;&gt;Karperien&lt;/a&gt; Flake”)&lt;/li&gt;
  &lt;li&gt;Wikipedia article for &lt;a href=&quot;https://en.wikipedia.org/wiki/Minkowski_sausage&quot;&gt;Minkowski Sausage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jeffrey Ventrella’s generator for &lt;a href=&quot;http://www.fractalcurves.com/Root5.html&quot;&gt;Mandelbrot’s Quartet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meanwhile, the variation made from the drag and drop method doesn’t appear anywhere I can find
via Google image search and Wikipedia surfing. Why would one way be so much more common than the other?
With some fiddling around I found rules to generate my wall’s version of the fractal (&lt;script type=&quot;math/tex&quot;&gt;L \rightarrow RLR, R \rightarrow LLR&lt;/script&gt;), however they have a strange
effect that seems to “flip” the direction you draw the contour at each step, e.g. the first step
goes from &lt;script type=&quot;math/tex&quot;&gt;RRRR&lt;/script&gt; (majority right turns) to &lt;script type=&quot;math/tex&quot;&gt;LLRLLRLLRLLR&lt;/script&gt; (majority left turns).
Another natural question is if the original L-System doesn’t place copies aligned with
the axes, what angle is it placing them at? It turns out the “flipping” behavior,
the L-System’s angles, and the seemingly arbitrary “about 27 degrees” from the beginning
are connected in a surprising way. But before we get to that, lets take a detour to review an important topic:&lt;/p&gt;

&lt;h2 id=&quot;how-to-count&quot;&gt;How to count&lt;/h2&gt;

&lt;p&gt;Procrastinating for over a decade has given me plenty of opportunities to look at the fractal
with fresh eyes as I was introduced to new branches of math. During freshman year of college I learned how to show the cardinality
of the natural numbers &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}&lt;/script&gt; is equal to the cardinality of pairs of natural
numbers &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}^2&lt;/script&gt; using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pairing_function#Cantor_pairing_function&quot;&gt;Cantor pairing function&lt;/a&gt;
to “dovetail” across the Cartesian plane. Similarly, I learned you could map the natural
numbers onto a spiral to show &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}&lt;/script&gt; has the same cardinality as pairs of integers &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}^2&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/cantorpairing.png&quot; alt=&quot;Cantor pairing function&quot; /&gt;
&lt;img src=&quot;/images/fractal/z2spiral.jpg&quot; alt=&quot;Z^2 spiral&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credit to &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Pairing_function#/media/File%3ACantor's_Pairing_Function.svg&quot;&gt;Wikipedia&lt;/a&gt; for the Cantor pairing function image, &lt;a href=&quot;http://stanford.edu/~dntse/classes/cs70_fall09/n20_fall09.pdf&quot;&gt;UCB CS70&lt;/a&gt; for the spiral&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both of these reminded me of how the wallflower fills space in the Cartesian
plane by building outwards from the origin. To use the wallflower’s structure as a pairing
function we would need to find a way to assign an “order” when we place each
square, preferably in a way that complements the recursive nature of its construction.
A natural starting point would be to use the center of the fractal as 0. From there we can number
the surrounding four squares added in the first iteration as 1, 2, 3 and 4
in clockwise order:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/numbering1.jpg&quot; alt=&quot;Numbering 0 to 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we’re faced with the question of how to label the squares from the next iteration. One
way would be to number them in the order they appear scanning from top down, left to right:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/numberingjank.jpg&quot; alt=&quot;Jank numbering 0 to 24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For lack of better words, this doesn’t feel very fractally – the order here seems unrelated to recursive
structure of fractal. What if instead we tried to reuse the “middle out” approach used for
0 to 4? After all, each “petal” is a copy of the first iteration we’ve
already given an ordering to. Reusing the clockwise scheme from 0 to 4 within each blue
petal, and &lt;em&gt;across&lt;/em&gt; each blue petal (the dashed lines):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/numbering2.jpg&quot; alt=&quot;Numbering 0 to 24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And extending to the next set of petals:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/numbering3.jpg&quot; alt=&quot;Numbering 0 to 124&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As chaotic as it may look at first glance, a few interesting properties emerge
if we look at the positions of certain numbers. If we isolate our view to just multiples of 5,
a scaled up grid tilted about 27 degrees clockwise is formed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/just5s.jpg&quot; alt=&quot;Just multiples of 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we only look at the numbers of the form &lt;script type=&quot;math/tex&quot;&gt;5n + 1&lt;/script&gt;,
we get the previous grid but scooted up by 1 square:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/just5plus1s.jpg&quot; alt=&quot;Just 5n + 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And if we look at just multiples of 25 we get another grid, scaled up even further:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/just25s.jpg&quot; alt=&quot;Just multiples of 25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The number 5 appears to have a special relationship with the fractal. The reason becomes
apparent if you look at the number of squares in each iteration. The 0th iteration
is a single square, the first iteration has 5, the second has 25, the third has 125, etc… Since
each iteration is constructed by taking the previous state and adding 4 additional copies,
it scales up by a factor of 5 in each step. Given the special relationship
with multiples of 5 and powers and 5, it’s tempting to redo the labeling while counting
in base 5 instead of base 10. Doing so we get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/numberingbase5.jpg&quot; alt=&quot;Numbering in base 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a ton of information, but if we focus in on just the iteration 3 pattern and its copy to the right you might
notice something interesting:&lt;/p&gt;

&lt;h2 id=&quot;how-to-add&quot;&gt;How to add&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/numberingsidebyside.jpg&quot; alt=&quot;Iteration 3 + copy to the right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you take any number on the left and check 5 spaces to the right, you’ll find
its copy on the teal petal. Comparing the numbers between cells, they always seem to be
the original value plus 200. For example, 5 spaces to the right of
44 you’ll find 244, and 5 spaces to the right of 3 is 203. In some sense, adding 200
seems to encode “shifting” 5 spaces to the right. This “shifting” property isn’t unique to 200
either: consider the positions of 0, 1, 2, 3, and 4 relative to 30, 31, 32, 33, and 34.&lt;/p&gt;

&lt;p&gt;If you stare for long enough you might notice by expanding any number, say 231 = 200 + 30 + 1,
we can use each number in the expanded form to find its location on the grid. In this case, we
can find vectors corresponding to 200, 30, and 1 on the grid and add them
together to get the location of 231:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/vector231.gif&quot; alt=&quot;231 decomposition vectors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can test out other numbers using the same strategy of breaking down the number into
its 1s, 10s, 100s, etc… places and adding vectors. Assuming
this works in general, all we need to find the position of any number on the grid is to know the position of each number
in its expanded form, and then add them together. Let’s &lt;del&gt;abuse&lt;/del&gt; introduce some notation, defining &lt;script type=&quot;math/tex&quot;&gt;\vec{n}&lt;/script&gt; as the vector
pointing to where the number &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; sits on the grid. Using our 1 digit values as an example:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{0} &amp;= \begin{bmatrix}
           0 \\
           0 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{1} &amp;= \begin{bmatrix}
           1 \\
           0 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{2} &amp;= \begin{bmatrix}
           0 \\
           1 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{3} &amp;= \begin{bmatrix}
           -1 \\
           0 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{4} &amp;= \begin{bmatrix}
           0 \\
           -1 \\
         \end{bmatrix}
  \end{align} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;With this new notation, we can stare at how “powers of 10” seem to behave:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{1} &amp;= \begin{bmatrix}
           0 \\
           1 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{10} &amp;= \begin{bmatrix}
           1 \\
           2 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{100} &amp;= \begin{bmatrix}
           0 \\
           5 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{1000} &amp;= \begin{bmatrix}
           5 \\
           10 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{10000} &amp;= \begin{bmatrix}
           0 \\
           25 \\
         \end{bmatrix}
  \end{align}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
    \overrightarrow{100000} &amp;= \begin{bmatrix}
           25 \\
           50 \\
         \end{bmatrix}
  \end{align} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Looking closely you might pick up on the pattern:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\overrightarrow{(10^n)} =  \begin{cases}
5^\frac{n}{2} \begin{bmatrix}
           0 \\
           1 \\
         \end{bmatrix} &amp; \text{if } n \text{ is even} \\
5^{\frac{n-1}{2}} \begin{bmatrix}
           1 \\
           2 \\
         \end{bmatrix} &amp; \text{if } n \text{ is odd}
\end{cases}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;This conditional formula was
how I initally wrote the visualization code. However it begged the question:
is there a more elegant way to compute the values without needing a conditional?
Ideally we want a transformation we could repeatedly apply to scale and rotate a vector
based on the value of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, i.e. a matrix raised to the power of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;. With some fiddling around, we can find the matrix &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; and its powers:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
M = \begin{bmatrix}
           -2 &amp; 1 \\
           1 &amp; 2\\
\end{bmatrix}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
M^2 = \begin{bmatrix}
           5 &amp; 0 \\
           0 &amp; 5\\
\end{bmatrix}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
M^3 = \begin{bmatrix}
           -10 &amp; 5 \\
           5 &amp; 10\\
\end{bmatrix}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
M^4 = \begin{bmatrix}
           25 &amp; 0 \\
           0 &amp; 25\\
\end{bmatrix}, \text{etc...} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Which conveniently matches the values we’re expecting &lt;em&gt;without&lt;/em&gt; needing a conditional in the equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\overrightarrow{(10^n)}  = M^n\overrightarrow{1} = \begin{bmatrix}
           -2 &amp; 1 \\
           1 &amp; 2\\
         \end{bmatrix}^n\begin{bmatrix}
           0 \\
           1 \\
         \end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;Similarly we can set up equations for the other possible digits:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\overrightarrow{(2 \cdot 10^n)} &amp;= M^n\overrightarrow{2} = \begin{bmatrix}
           -2 &amp; 1 \\
           1 &amp; 2\\
         \end{bmatrix}^n\begin{bmatrix}
           1 \\
           0 \\
         \end{bmatrix}
\newline
\overrightarrow{(3 \cdot 10^n)} &amp;= M^n\overrightarrow{3} = \begin{bmatrix}
           -2 &amp; 1 \\
           1 &amp; 2\\
         \end{bmatrix}^n\begin{bmatrix}
           0 \\
           -1 \\
         \end{bmatrix}
\newline
\overrightarrow{(4 \cdot 10^n)} &amp;= M^n\overrightarrow{4} = \begin{bmatrix}
           -2 &amp; 1 \\
           1 &amp; 2\\
         \end{bmatrix}^n\begin{bmatrix}
           -1 \\
           0 \\
         \end{bmatrix}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;If you blur your eyes with the tears shed over the cursed notation, you might
make out a connection to number systems such as base 5 or base 10.
Similar to how in base 10 the number 1234 would expand to:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
1234 &amp;= 10^3 \cdot 1 + 10^2 \cdot 2 + 10^1 \cdot 3 + 10^0 \cdot 4
\newline
1234 &amp;= 1000 + 200 + 30 + 4
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;And in base 5:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
1234_5 &amp;= 5^3 \cdot 1 + 5^2 \cdot 2 + 5^1 \cdot 3 + 5^0 \cdot 4
\newline
1234_5 &amp;= 1000_5 + 200_5 + 30_5 + 4_5
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;We can use the matrix &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; as our base, and vectors as our digits to encode positions
in the fractal:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
\overrightarrow{1234} &amp;= M^3\overrightarrow{1} + M^2\overrightarrow{2} + M^1\overrightarrow{3} + M^0\overrightarrow{4}
\newline
\overrightarrow{1234} &amp;= \overrightarrow{1000} + \overrightarrow{200} + \overrightarrow{30} + \overrightarrow{4}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;We’ve stumbled upon a number system with a matrix base and vector digits, rather than scalars!
Counting up from 0 we can get a feel for the how the number system connects to the structure
of the fractal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/makeitcount.gif&quot; alt=&quot;Gif with vectors + formulas&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;determinants&quot;&gt;Determinants&lt;/h2&gt;

&lt;p&gt;You may have noticed &lt;script type=&quot;math/tex&quot;&gt;20&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;40&lt;/script&gt;
have switched positions compared to our original numbering. This is because our choice
of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; has a negative determinant &lt;script type=&quot;math/tex&quot;&gt;\det(M) = -5&lt;/script&gt;, which means it has the side effect of “flipping” the
orientation of space each iteration. Now that we know our fractal is linked to linear algebra,
we can visualize the connection by overlaying scaled grids representing how powers of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; act on our “digit vectors”
&lt;script type=&quot;math/tex&quot;&gt;\vec{1}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\vec{2}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\vec{3}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\vec{4}&lt;/script&gt; a la &lt;a href=&quot;https://www.3blue1brown.com/lessons/matrix-multiplication&quot;&gt;3Blue1Brown&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/gridoverlay.gif&quot; alt=&quot;Overlayed grid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To avoid the flipping behavior we would need to pick a matrix with a positive determinant,
for example:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
M^\prime = \begin{bmatrix}
           2 &amp; 1 \\
           -1 &amp; 2\\
\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\det(M^\prime) = 5&lt;/script&gt;

&lt;p&gt;Visualizing this new choice of matrix:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/gridoverlayprime.gif&quot; alt=&quot;Overlayed grid for M'&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of “flipping” and realigning with the axes every other iteration, this choice of
base continually rotates our “digit vectors” clockwise.
Wait, didn’t we see a version of the fractal like this way back at the start with the L-System?
Sure enough, using &lt;script type=&quot;math/tex&quot;&gt;M^\prime&lt;/script&gt; as our base reproduces the L-System version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/unwoops.jpg&quot; alt=&quot;Unwoops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mystery solved! The two fractals are &lt;em&gt;almost&lt;/em&gt; the same, but the one on my wall is generated using
&lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;\det(M) = -5&lt;/script&gt;, while the more common one is generated from &lt;script type=&quot;math/tex&quot;&gt;M^\prime&lt;/script&gt;
where &lt;script type=&quot;math/tex&quot;&gt;\det(M^\prime) = 5&lt;/script&gt;. The choice of matrix also sheds some light on where the seemingly
arbitrary “about 27 degrees” comes from. You may have noticed the absolute value of both
determinants is &lt;script type=&quot;math/tex&quot;&gt;5&lt;/script&gt;, which conveniently matches the way the fractal increases in size by a factor
of 5 each iteration. If we picked a matrix with a larger determinant, our “digit vectors” would
grow too quickly and leave behind “empty space” each iteration. For example adjusting &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; to give
it a determinant of &lt;script type=&quot;math/tex&quot;&gt;-6&lt;/script&gt; results in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/det6.jpg&quot; alt=&quot;Determinant 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile if we pick a matrix with a smaller determinant, our “digit vectors” would grow too
slowly and iterations would overlap. Adjusting &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; to give it a determinant of &lt;script type=&quot;math/tex&quot;&gt;-4&lt;/script&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/det4.jpg&quot; alt=&quot;Determinant 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So ostensibly we want a matrix base with determinant &lt;script type=&quot;math/tex&quot;&gt;\pm 5&lt;/script&gt;. Additionally, we want our
matrix to have integer entries to ensure it always maps our digit vectors onto
whole number coordinates. It just so happens the vector &lt;script type=&quot;math/tex&quot;&gt;\left\langle 1, 2 \right\rangle&lt;/script&gt;
has integer entries and magnitude &lt;script type=&quot;math/tex&quot;&gt;\sqrt{5}&lt;/script&gt;, meaning we can use it and one of
its 90 degree rotations as the columns of our matrix to satisfy the determinant
and whole number constraint. Computing the angle of this vector we get &lt;script type=&quot;math/tex&quot;&gt;\arctan{\frac{2}{1}} \approx 63.43^\circ&lt;/script&gt;,
i.e. “about 27 degrees” away from the y-axis.&lt;/p&gt;

&lt;h2 id=&quot;how-to-add-part-2&quot;&gt;How to add part 2&lt;/h2&gt;

&lt;p&gt;You may have noticed vector addition fails horribly in most cases other than
the expanded form ones, e.g. &lt;script type=&quot;math/tex&quot;&gt;\vec{2} + \vec{2} \neq \vec{4}&lt;/script&gt;. This is expected, since the choice of &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;4&lt;/script&gt;
were to help make the connection to base 5 number systems but unrelated to the
actual direction the vectors point. It might be more appropriate to refer to 1 through 4
as up (&lt;script type=&quot;math/tex&quot;&gt;\vec{1}&lt;/script&gt;), right (&lt;script type=&quot;math/tex&quot;&gt;\vec{2}&lt;/script&gt;), down (&lt;script type=&quot;math/tex&quot;&gt;\vec{3}&lt;/script&gt;), and left (&lt;script type=&quot;math/tex&quot;&gt;\vec{4}&lt;/script&gt;). As you
might expect, opposite directions cancel eachother out, i.e. &lt;script type=&quot;math/tex&quot;&gt;\vec{1} + \vec{3} = \vec{2} + \vec{4} = \vec{0}&lt;/script&gt;.
But what about other combinations of additions? By looking closely at the base 5 numbering and following where
combinations of unit vectors point:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/base5center.jpg&quot; alt=&quot;Base 5 numbering&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can build up a table based on where it appears the sum of unit vectors would fall:&lt;/p&gt;

&lt;style&gt;
table{
    border-spacing: 0;
    border:1px solid #000000;
}

th{
    border:1px solid #000000;
}

td{
    border:1px solid #000000;
}
&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}\hspace{5pt}&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{1}\hspace{5pt}&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{2}\hspace{5pt}&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{3}\hspace{5pt}&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{4}\hspace{5pt}&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}\hspace{5pt}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{1}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{2}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{3}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{4}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{1}\hspace{5pt}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{1}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{14}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{13}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{22}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{2}\hspace{5pt}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{2}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{13}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{41}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{44}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{3}\hspace{5pt}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{3}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{44}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{32}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{31}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{4}\hspace{5pt}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{4}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{22}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{31}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{23}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The table is symmetric across the diagonal meaning addition is commutative, as expected
for vector addition. More importantly, several additions result in 2 digit values. While it might
not seem like a big deal, it means when doing larger additions we have to worry about
carrying over values to the next digit. For example, if we want to find the number directly
above 22, we can compute &lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{22} + \overrightarrow{1}&lt;/script&gt;. Using
traditional long addition and carrying notation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{cccc}
	    &amp; \overset{1}{\vphantom{0}} &amp; \overset{1}{2} &amp; 2 \\
	  + &amp;   &amp;   &amp; 1 \\
        \hline
	    &amp; 1 &amp; 3 &amp; 3 \\
	\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;If you’re a bit confused, remember &lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{2} + \overrightarrow{1} = \overrightarrow{13}&lt;/script&gt;.
And if you’re suprised this works at all, join the club! Since this is a blog post and not a proof,
I leave sanity checking this addition scheme works in general to the reader.&lt;/p&gt;

&lt;h2 id=&quot;intermission-related-topics&quot;&gt;Intermission: Related Topics&lt;/h2&gt;

&lt;p&gt;The concept of using things outside of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}&lt;/script&gt; in a number system wasn’t totally unfamiliar thanks to &lt;a href=&quot;https://en.wikipedia.org/wiki/Balanced_ternary&quot;&gt;Balanced Ternary&lt;/a&gt;
which uses &lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; as digits, and a base of &lt;script type=&quot;math/tex&quot;&gt;3&lt;/script&gt;. If you imagine balanced
ternary as being 1 dimensional along the x-axis, the wallflower can be seen as its 2D analog
by adding two new digits to account for the positive and negative directions of the y-axis.
An alternative scheme for &lt;a href=&quot;https://en.wikipedia.org/wiki/Generalized_balanced_ternary&quot;&gt;generalized balanced ternary&lt;/a&gt;
already exists, and generalizes to any number of dimensions using lattices of &lt;a href=&quot;https://en.wikipedia.org/wiki/Permutohedron&quot;&gt;permutahedrons&lt;/a&gt;
(at least from what I’ve been able to dig up). In 2 dimensions, this ends up being the hexagonal lattice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/hexagon.jpg&quot; alt=&quot;2D generalized balanced ternary with hexagons&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visualization of generalized balanced ternary in 2D using hexagons from &lt;a href=&quot;https://en.wikipedia.org/wiki/Generalized_balanced_ternary#/media/File:Visualization_of_three-digit_2D_generalized_balanced_ternary_numbers.pngkipedia.org/wiki/Generalized_balanced_ternary#/media/File:Visualization_of_three-digit_2D_generalized_balanced_ternary_numbers.png&quot;&gt;Wikipedia&lt;/a&gt;. See also &lt;a href=&quot;https://en.wikipedia.org/wiki/Gosper_curve&quot;&gt;Gosper Curve&lt;/a&gt;,
which is like a hexagonal wallflower.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another exotic number system is &lt;a href=&quot;https://en.wikipedia.org/wiki/Quater-imaginary_base&quot;&gt;Quater-imaginary Base&lt;/a&gt;,
which uses the imaginary value &lt;script type=&quot;math/tex&quot;&gt;2i&lt;/script&gt; as its base, and &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;3&lt;/script&gt; as digits.
If you imagine complex numbers as vectors, and imagine &lt;script type=&quot;math/tex&quot;&gt;2i&lt;/script&gt; as a matrix that performs a scale and rotation,
we can convert this number system into our cursed notation:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
M_{2i} = \begin{bmatrix}
           0 &amp; -2 \\
           2 &amp;  0\\
         \end{bmatrix}, %]]&gt;&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{0} = \begin{bmatrix}
           0 \\
           0 \\
         \end{bmatrix},&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{1} = \begin{bmatrix}
           1 \\
           0 \\
         \end{bmatrix},&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{2} = \begin{bmatrix}
           2 \\
           0 \\
         \end{bmatrix},&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\overrightarrow{3} = \begin{bmatrix}
           3 \\
           0 \\
         \end{bmatrix}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, we can convert the positive determinant matrix &lt;script type=&quot;math/tex&quot;&gt;M^\prime&lt;/script&gt; from earlier into its
complex number equivalent to get a base &lt;script type=&quot;math/tex&quot;&gt;2+i&lt;/script&gt; number system. &lt;a href=&quot;https://ideophilus.wordpress.com/2016/10/17/balanced-base-2i-and-some-gratuitous-fractals/&quot;&gt;Balanced base 2+i (and some gratuitous fractals)&lt;/a&gt;
by Timothy James McKenzie Makarios explores this concept. I ran into this while looking for visualizations of
quater-imaginary base on Google images for this section, only to realize this connection had been
made back in 2016. Somewhat embarassingly I found this after I made the animation at the
start, only to find the author had already beaten me to that as well, although
using the &lt;script type=&quot;math/tex&quot;&gt;M^\prime&lt;/script&gt; version of the fractal instead of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; (as far as I know &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;
cannot be encoded as a complex number).&lt;/p&gt;

&lt;p&gt;When I realized the matrix base number system worked at all I started
searching around to see if anyone else had made the connection between fractals, tesselations, linear algebra
and number systems. Digging around:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://math.stackexchange.com/questions/43054/is-there-a-number-system-with-matrix-base&quot;&gt;Project BinSys&lt;/a&gt; led by Attila Kovács
is focused on finding matrix bases specifically where the determinant is 2, for a generalized form of binary.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://people.clas.ufl.edu/avince/files/SIDMARepTess.pdf&quot;&gt;Replicating Tesselations&lt;/a&gt;
by Andrew Vince does all the rigorous math stuff to formalize what I’ve been trying to
describe through vigorous handwaving, and generalizes to any lattice rather than just &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}^2&lt;/script&gt;.
    &lt;ul&gt;
      &lt;li&gt;Here you can also find proofs for the alternative way to generalize balanced ternary
  into higher dimensions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of handwaving: the next section is now fully in the territory of “things I
started to think about a week ago when I started writing this,” so any semblance of rigor
that came from having many years to think about the problem is out the window. Instead
I’ll be relying on my mental model of linear algebra, which is “if it sounds like it’s true
and looks like it’s true, it’s probably true.”&lt;/p&gt;

&lt;h2 id=&quot;the-quirks-of-3ding-a-wallflower&quot;&gt;The quirks of 3D’ing a wallflower&lt;/h2&gt;

&lt;p&gt;Middle school me was really into Minecraft, so naturally I always wondered: would the fractal work with
cubes? Specifically, is there a way to create a 3D version of the fractal by
starting with cube and copying outwards in groups of six to form a “3D plus”? This mostly
comes down to what properties we want to include when we generalize to a 3x3 matrix. The
ones that beckoned to me from the ether are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All of the entries in the matrix must be integers. This is needed so when we apply
the matrix base to our vector digits (6 unit vectors sitting on the axes) they still
have integer values for each component. In the Vince paper this is formalized as “endomorphism of &lt;script type=&quot;math/tex&quot;&gt;\Lambda&lt;/script&gt;”,
i.e. a mapping from the lattice &lt;script type=&quot;math/tex&quot;&gt;\Lambda = \mathbb{Z}^3&lt;/script&gt; back onto itself.&lt;/li&gt;
  &lt;li&gt;Each column vector in the matrix should have a Hamming distance of 3 from the origin.
This constraint ensures the 6 copies of the “3D plus” we create on the second
iteration don’t overlap with the original centered on the origin, but are near enough to still
be adjacent to it.&lt;/li&gt;
  &lt;li&gt;We want a matrix with determinant &lt;script type=&quot;math/tex&quot;&gt;\pm&lt;/script&gt;7. Since each iteration of the fractal adds 6 new copies,
we increase the size of the fractal by 7 times each step. If we want to “pack” together these
copies efficiently we need to make sure the matrix we apply scales up
inputs by a factor of 7 as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brute force searching through triplets of vectors with Hamming distance of 3, we get this nifty 3x3
matrix that checks all of the boxes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
            2 &amp; -1 &amp; 0 \\
           -1 &amp;  0 &amp; 2 \\
            0 &amp; -2 &amp; 1 \\
         \end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;Visualizing gives us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/3d.gif&quot; alt=&quot;3D iterations 0 through 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow, it looks terrible! One problem that stands out immediately is later iterations seem to be “smooshed”
resulting in spots where previous iterations are exposed.
Looking closely at iteration 2, you might notice we can comb over the bald spots
by adding two more “3D pluses” centered on &lt;script type=&quot;math/tex&quot;&gt;\left\langle 1, 1, 1\right\rangle&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\left\langle-1, -1, -1\right\rangle&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/bandaid.gif&quot; alt=&quot;Iteration 2 with bandaid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we added two new pluses marked in yellow, and visualize the location of the centers
of all 8 pluses. For a bandaid fix it feels like it works a little too well. Looking at just
the center points of our 8 new pluses they are arranged like the vertices of a warped cube.
I’m still not entirely sure what to make of this, although it feels like it’s related to
the fact that cubes (8 vertices, 6 faces) are the dual solid to octahedrons (6 vertices, 8 faces).
It’s obviously tempting to try to take this new cube and make 6 copies of it, but to avoid
derailing this post too much let’s save that for another day.&lt;/p&gt;

&lt;p&gt;Visually, the problem with iteration 2 seems to be that the 3D pluses aren’t placed symmetrically
around the center, causing the fractal to expand in a non-uniform way. Manually trying to find a more symmetric
arrangement of 6 pluses is tricky, feeling a bit like trying to &lt;a href=&quot;https://en.wikipedia.org/wiki/Hairy_ball_theorem&quot;&gt;comb a hairy ball&lt;/a&gt;.
A sufficient (and possibly necessary) condition to prevent the smooshing behavior is
to pick a matrix where each column is mutually orthogonal and has the same magnitude. I suspect if
we include this with the prior constaints it’s impossible to satisfy in 3D. Each integer valued
column vector would need a magnitude of &lt;script type=&quot;math/tex&quot;&gt;\sqrt[3]{7}&lt;/script&gt;, so given that &lt;script type=&quot;math/tex&quot;&gt;x, y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; are integers,
we must solve:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sqrt{x^2+y^2+z^2} = \sqrt[3]{7}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x^2 + y^2 + z^2 = 7^{\frac{2}{3}}&lt;/script&gt;

&lt;p&gt;This can never be true since the left hand side is always an integer, while the right hand
side is irrational. Luckily, if we go up to four dimensions the math works out in our favor. In 4 dimensions
the components of each vector must satisfy:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sqrt{x^2 + y^2 + z^2 + w^2} = \sqrt[4]{9}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x^2 + y^2 + z^2 + w^2 = 3&lt;/script&gt;

&lt;p&gt;Which works if we let 3 out of 4 of the entries to be &lt;script type=&quot;math/tex&quot;&gt;\pm 1&lt;/script&gt;,
and set the last to &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;. It turns out there’s plenty of space in hyperspace, giving us many
possible matrices with columns of this form that satisfy all previous conditions. The
following matrix has one extra property that we’ll cover briefly near the end:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
0 &amp; -1 &amp; -1 &amp; -1 \\
1 &amp;  0 &amp; -1 &amp;  1 \\
1 &amp;  1 &amp;  0 &amp; -1 \\
1 &amp; -1 &amp;  1 &amp;  0 \\
\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;Now that we have a suitable matrix, we can attempt to visualize our 4D fractal.
One way to do this is to take 3D “slices” of 4D space by fixing the
value of &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/4d_iter0.gif&quot; alt=&quot;4D iteration 0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It turns out the base case is boring regardless of how many dimensions we give it. Moving
on to iteration 1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/4d_iter1.gif&quot; alt=&quot;4D iteration 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here you can get a better feel for how the visualization works. The purple cubes on the
left and right that appear to be sitting at the origin are really at the &lt;script type=&quot;math/tex&quot;&gt;(x,y,z,w)&lt;/script&gt;
coordinates of &lt;script type=&quot;math/tex&quot;&gt;(0,0,0,-1)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;(0,0,0,1)&lt;/script&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/4d_iter2.gif&quot; alt=&quot;4D iteration 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see parts of iteration 1 still poking through in iteration 2, which is concerning given this
was a symptom of the squishing behavior we saw in 3D. However looking closely, the squishing
behavior doesn’t seem as bad yet. If you really twist your mind around the concept of 4
dimensions, you might be able to see that while the two pluses in &lt;script type=&quot;math/tex&quot;&gt;w=0&lt;/script&gt; don’t
seem to be balanced, there are 3 pluses sitting to the left (&lt;script type=&quot;math/tex&quot;&gt;w=-1&lt;/script&gt;) and 3 more to the
right (&lt;script type=&quot;math/tex&quot;&gt;w=1&lt;/script&gt;) that you could imagine as being orthogonal to the &lt;script type=&quot;math/tex&quot;&gt;w=0&lt;/script&gt; ones. The trios
of cubes sitting at each side (&lt;script type=&quot;math/tex&quot;&gt;w=\pm 2&lt;/script&gt;) are part of the 4D pluses that poke through
the 4th dimension into the slices on the ends.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/4d_iter3.gif&quot; alt=&quot;4D iteration 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My main takeaway from this is that while iteration 2
can still be seen, iteration 1 has now been completely covered.
Technically iteration 3 extends farther out in the &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt; dimension, but at this point it’s
difficult to comprehend the fractal anyway. I imagine this is the sort of thing my higher dimensional analog would
put up on the 4D hypersurface of their room’s 5D walls to admire in its full glory, so I’m dubbing it “the orthotopeflower.”
Unfortunately my apartment is measured in square feet and not hypercubic feet, so
it’s difficult for me to fully appreciate it. There are a couple of issues with the “3D slices”
approach of visualizing in 4D:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It extends way too quickly in the horizontal direction, wasting precious screen
(or wall) real estate. Notably in iteration 3 we
need to add 2 more slices to each side to visualize the whole thing.&lt;/li&gt;
  &lt;li&gt;My inferior 3 dimensional eyes can’t see the interior of 3D objects (unlike how I’m
able to see the interior of colored in 2D squares on a piece of paper), making it
hard to fully appreciate the structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get around both of these limitations we can use the following 7x7 grid of 7x7 grids to visualize it
a la the very first animation of this post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/grow4d.gif&quot; alt=&quot;Flat 4D animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;/images/fractal/static4d.jpg&quot;&gt;Here’s a static image&lt;/a&gt; of the last iteration if you want to admire it. If this isn’t nice, what is?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Each smaller grid shows a slice of -3 to 3 on the x and y axes. The “grid of grids” represent
-3 to 3 along the z and w axes. Whenever a square crosses from one small grid
to another it’s really being translated through the z or w axis. Squares that appear to
fade in or fade out are moving in or out of the 7x7x7x7 “viewing window” in 4 dimensions.
Compared to the line of 3D slices, this approach uses screen real estate a bit better
(growing as a square instead of in a line), and lets you see the interior of the entire
fractal without obscuring previous iterations. Plus this design would go nicely with
the existing fractal on my wall.&lt;/p&gt;

&lt;p&gt;If we’re willing to discard all of the flourishes from the animation and assign 1 pixel
per tile in the fractal we can increase our viewing window up to 31x31x31x31:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/31x31x31x31.png&quot; alt=&quot;31x31x31x31 visualization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a lot to take in, but at the very least seems to confirm that the fractal consistently
expands outwards without excessive smooshing like we saw in 3D. And personally, I think
it would make a lovely quilt or picnic blanket. In particular these slices near the very
center are remarkably pleasant:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/quilt.png&quot; alt=&quot;Aesthetically pleasing slices 2D slices of the fractal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A natural question is if we can continue into higher dimensions. Sadly I suspect the
answer is no. Applying all our constraints from earlier we need a dimension &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; such that:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\sqrt[d]{2d+1} \in&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\{\sqrt{3^2}, \sqrt{1^2 + 2^2}, \sqrt{1^2+1^2+1^2}\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The left hand side is the magnitude each column vector needs to be for a matrix with &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; mutually
orthogonal columns to have determinant &lt;script type=&quot;math/tex&quot;&gt;2d+1&lt;/script&gt; so that it scales inputs enough to fit the &lt;script type=&quot;math/tex&quot;&gt;2d&lt;/script&gt; copies added each iteration.
The right hand side is the set of possible magnitudes of integer valued vectors that have a Hamming distance of 3 away from the origin, so
the copies created in the second iteration touch but don’t intersect with the first iteration.
Graphing this, it looks like the only dimensions where these can be satisifed are 1 (balanced
ternary), 2 (the wallflower/quadratic flake), and 4 (the orthotopeflower).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/desmos.jpg&quot; alt=&quot;Demos graph of viable dimensions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, as mentioned earlier, the choice of matrix to use as the base of our 4D number system was special. In particular
it encodes the quaternion &lt;script type=&quot;math/tex&quot;&gt;i+j+k&lt;/script&gt;, meaning similar to quater imaginary base we now
have a way to encode quaternions in “balanced nonary quaternion base”. In this scheme
the 9 possible digits are &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\pm1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\pm i&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\pm j&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\pm k&lt;/script&gt;, with base &lt;script type=&quot;math/tex&quot;&gt;i+j+k&lt;/script&gt;. Since I’m not too familiar
with quaternions and still not entirely sure if this actually works, I’ll be delegating
this problem to a future version of me who knows more math. This strategy seemed to work
pretty well last time.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;I once had a dream about a post-scarcity society that had to work around the problem of
people not having any motivation to do anything, since all their basic needs were met.
To give people something to do, every few years everyone over a certain age was expected
to report on something beautiful they learned or discovered about the world, otherwise
they’d be turned into soylent or something (Note: post-scarcity &lt;script type=&quot;math/tex&quot;&gt;\neq&lt;/script&gt; utopia). Anyway, I’d like to
imagine the discovery of a strange flower with jigsaw-like petals blooming endlessly across four
dimensional space would be enough to keep me off the chopping block for awhile.&lt;/p&gt;

&lt;p&gt;I finally got around to this in an attempt attempt to rekindle some passion for math and programming
after a period of burnout. It turns out my younger
self left behind the perfect gift in the form of a scavenger hunt across the domains of fractals, number systems,
linear algebra and higher dimensions. It makes me curious about how many other interesting
ideas other people have lying around in plain sight as sketches or To Do’s.&lt;/p&gt;

&lt;p&gt;If this post comes off as a bit rambly from the many twists and turns between domains it’s
because I tried to follow the path I took while haphazardly picking up and forgetting
about the problem over the years. There are a handful of spots where you might ask “how did you know
doing this specific thing would lead to that?” The simple answer is I had no clue if any of this
would lead anywhere, I just tried different things on a whim and this post outlines the parts that stuck.
Hopefully by writing and visualizing my lines of reasoning I’m able to make the connections a bit more accessible
for future fractal fiddlers finding themselves falling face first down the same rabbit hole.&lt;/p&gt;

&lt;p&gt;As a final twist, an astute reader may have
noticed none of the visualizations made for this post
matched the fractal on my wall in the post’s thumbnail. The 4th iteration (green) is copied about 27
degrees in the &lt;em&gt;wrong&lt;/em&gt; direction:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fractal/closingwoops.jpg&quot; alt=&quot;Closing woops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In a fun case of “why do I remember this, but not what I ate for dinner 2 days ago,” I
remember my exact reasoning for doing this over a decade ago: I thought the fractal
would unalign itself from the cardinal directions if I always tilted it off the axes in the
same direction. As we saw earlier with &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; vs &lt;script type=&quot;math/tex&quot;&gt;M^\prime&lt;/script&gt; my intuition to compensate for tilt almost made sense, other
than the fact it already corrects itself in alternating steps. I was a bit
embarassed about this until I remembered even Donald Knuth
&lt;a href=&quot;https://www.youtube.com/watch?v=v678Em6qyzk&quot;&gt;made a wrong turn&lt;/a&gt; when putting up a fractal on his wall.
Err and err and err again, but less and less and less!&lt;/p&gt;</content><author><name></name></author><summary type="html">Warning: Math, Handwaving I spent a lot of time doodling in middle school in lieu of whatever it is middle schoolers are supposed to be doing. Somewhere between the Cool S’s and Penrose triangles I stumbled upon a neat way to fill up graph paper by repeatedly combining and copying squares. I suspected there was more to the doodle but wasn’t quite sure how to analyze it. Deciding to delegate to a future version of me that knows more math, I put it up on the wall behind my desk where it has followed me from high school to college to the present day.</summary></entry><entry><title type="html">Unintuitive observations from teaching</title><link href="http://localhost:4000/2021/07/02/Teaching/" rel="alternate" type="text/html" title="Unintuitive observations from teaching" /><published>2021-07-02T00:00:00-07:00</published><updated>2021-07-02T00:00:00-07:00</updated><id>http://localhost:4000/2021/07/02/Teaching</id><content type="html" xml:base="http://localhost:4000/2021/07/02/Teaching/">&lt;p&gt;Welp, I zoned out for another year. Luckily I’m pretty sure no one reads this stuff, except maybe CS 186 students who want to investigate the TA who answers debugging questions at 4 AM instead of teaching a discussion section. Which brings us to today’s topic!&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;teaching-and-other-paradoxes&quot;&gt;Teaching, and other paradoxes&lt;/h2&gt;

&lt;p&gt;Disclaimer: these aren’t going to be real paradoxes as much as they are catch-22s or surprising results a la &lt;a href=&quot;https://en.wikipedia.org/wiki/Simpson%27s_paradox&quot;&gt;Simpson’s paradox&lt;/a&gt;, although I did leave a real paradox in my bio on the &lt;a href=&quot;https://cs186berkeley.net/sp21/staff/&quot;&gt;class website&lt;/a&gt;. For background, from spring 2020 to spring 2021 I TA’d for CS 186, Berkeley’s databases course of roughly 600 students per semester. Starting in fall 2020 I was a head TA, which is a fancy way to say I answered more emails and worked extra hours.&lt;/p&gt;

&lt;p&gt;An important piece of context is that the course’s assignments are a term-long project implementing various components of a database: query optimizer, indices, concurrency control, etc… Three of my main goals as a TA were:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decrease friction on the student’s end. A bit of a conflicting goal to go for since falling into debugging session rabbit holes or stumbling waist-deep in a flawed design are important things to be aware of when writing software. But, the primary goal of the assignments was to help students &lt;a href=&quot;https://en.wikipedia.org/wiki/Grok#In_computer_programmer_culture&quot;&gt;grok&lt;/a&gt; the algorithms presented in lecture, and getting caught in the weeds isn’t conducive to that goal.&lt;/li&gt;
  &lt;li&gt;Help students help themselves. There are a lot of students compared to TAs, and that ratio isn’t getting any better thanks to &lt;a href=&quot;https://www.dailycal.org/2022/04/08/a-personal-view-of-uc-berkeleys-eecs-crisis/&quot;&gt;budget cuts&lt;/a&gt;. On top of that, the pandemic made it difficult for students in distant time zones to get help directly. So a nice way to alleviate both issues was to make it easier for students to work out problems on their own.&lt;/li&gt;
  &lt;li&gt;Reduce TA workload, again thanks to budget cuts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I think I did a pretty good job at hacking away toward these goals, there were a few counterintuitive observations made along the way.&lt;/p&gt;

&lt;h3 id=&quot;1-making-things-clearer-leads-to-more-confused-students&quot;&gt;1. Making things clearer leads to more confused students&lt;/h3&gt;

&lt;p&gt;Bugs and inconsistencies naturally crop up over time in any code, and the programming assignments are no exception. In the past, a large amount of time was spent on developing new assignments instead of fixing problems in the existing assignments. Or in the words of Vonnegut, “Everyone wants to build, but no one wants to maintain.” Eventually, we shifted towards improving the existing the assignments by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Adjusting the given APIs to be less foot-shooty&lt;/li&gt;
  &lt;li&gt;Adding tips in the documentation and specification with advice for common errors&lt;/li&gt;
  &lt;li&gt;Leaving in more structure in the provided code&lt;/li&gt;
  &lt;li&gt;Introducing very, very detailed error output on unit tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, after three semesters’ worth of these changes, the amount of confusion surely decreased? Sort of. Overall, projects went a lot smoother – there were significantly fewer questions on &lt;a href=&quot;https://piazza.com/&quot;&gt;Piazza&lt;/a&gt;, the Q&amp;amp;A platform for the class. Survey results showed a drop in complaints about workload and median time spent on assignments went down. But the amount of confusion in office hours became &lt;em&gt;worse&lt;/em&gt;. Huh, weird. This was almost certainly due to sampling bias. Consider the two types of students who might come to office hours for help on a programming assignment:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A student who understands the material well, but is confused by poor documentation, confusing APIs, or ambiguous specifications&lt;/li&gt;
  &lt;li&gt;A student who is confused about the material, and subsequently extra confused about the assignment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Type 1 students used to make up the majority of office hour tickets and were the kind many of the improvements were targeted towards. And ultimately, helping those students worked. Even when Type 1 students came in it was usually just a matter of pointing out parts of the documentation or the material to re-review – easy!&lt;/p&gt;

&lt;p&gt;Helping Type 2 is a bit more involved since confusion about the assignments would usually be rooted in deeper misunderstandings about the concepts in the course. Rather than pointing towards material to re-review, fixing the problem would require an ad hoc lesson, followed by a code review to fix anything that was written on false assumptions, all before even getting to the original bug! By cutting down on Type 1 students, the observed proportion of Type 2 students increased, creating the illusion of students being more confused.&lt;/p&gt;

&lt;h3 id=&quot;2-removing-60-of-students-would-cut-wait-times-by-0&quot;&gt;2. Removing 60% of students would cut wait times by… 0%&lt;/h3&gt;

&lt;p&gt;One of the “quality of life” metrics for a course is how long someone has to wait to get help. During the pandemic, it became pretty easy to measure thanks to the introduction of an online ticket queuing system. The online system also made it easier to analyze information about where tickets were coming from:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zipf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above graph shows the number of tickets per student in descending order and is a classic &lt;a href=&quot;https://en.wikipedia.org/wiki/Zipf%27s_law&quot;&gt;zipf distribution&lt;/a&gt;. Ultimately we found that semester that the top 1% of students accounted for 35% of the tickets while the bottom 80% accounted for about 7.5%, with almost 60% of students never filing a ticket at any point.&lt;/p&gt;

&lt;h3 id=&quot;3-the-duality-of-man&quot;&gt;3. The duality of man&lt;/h3&gt;

&lt;p&gt;Many of the changes I introduced as a TA were aimed at making the projects Less Bad™, which oftentimes included changes that closed off certain pitfalls at the expense of freedom in design choice. These weren’t really changes I was happy with – my favorite assignments at Cal were the open-ended ones, and when I took the course I never ran into any severe design blocks. But, anonymous feedback made it pretty clear that a non-trivial portion of the class was getting caught in design ruts, and caused many to give up on assignments prematurely or skip them outright. It could be argued that these are acceptable losses, but to me, it was preferable to sacrifice some difficulty for higher completion rates – difficulty is secondary to the main goal of having students apply the material.&lt;/p&gt;

&lt;p&gt;While historically feedback on assignments was skewed towards “too difficult! make it easier,” by my third semester of teaching we hit about 90% “too hard!” and 10% “too easy” – it would be tricky to please everyone. A few ways to do it would be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Have students work out mandatory design docs before programming, and get a review from TAs. This is a bit foiled though by our already stretched staff allocation.&lt;/li&gt;
  &lt;li&gt;Have open-ended extra credit assignments that do allow for more student creativity. This is in the works, probably, since it’s on the list of cans I’ve kicked to future generations of TAs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with those changes though, I imagine we’d still be somewhere where complaints come from both ends of the spectrum. Which is a good spot to be in! A past professor based their lecture pace at the point when complaints about being too fast and too slow hit equilibrium. Not being able to satisfy everyone is hardly a paradox, just a fact of life. The real paradox here is a piece of feedback received that argued that “the projects handhold too much!” and later concluded with “the projects are too open-ended.” You can never satisfy everyone, and in some cases, you can’t even satisfy one!&lt;/p&gt;

&lt;h3 id=&quot;4-good-news-is-no-news&quot;&gt;4. Good news is no news&lt;/h3&gt;

&lt;p&gt;This last observation is less of a “paradox” and more of just a quirk with how feedback is viewed, but one that I think is important for other educators who might fall in the same trap. A large part of what I think makes CS 186 a Not Too Bad™ course is that we rely heavily on student feedback. A common theme I noticed when receiving feedback is that we tended to focus on the negatives – our job is to fix things that aren’t working, and positive feedback didn’t provide any hints towards that end.&lt;/p&gt;

&lt;p&gt;On the other side of the spectrum, many of the biggest improvements will likely never receive much acknowledgment. Since most improvements are based on feedback &lt;em&gt;after&lt;/em&gt; an assignment is submitted, only students in future iterations of the class get to enjoy the fixes without ever knowing of the original problems. Rarely does anyone ever notice the &lt;em&gt;absence&lt;/em&gt; of a bug and likewise, it’s easy to miss the &lt;em&gt;absence&lt;/em&gt; of once common complaints. In other words, when you do things right, people (including yourself) won’t be sure you’ve done anything at all.&lt;/p&gt;

&lt;h2 id=&quot;related-reading&quot;&gt;Related Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-99.html&quot;&gt;A Berkeley View of Teaching CS at Scale&lt;/a&gt;: In case any of the following thoughts crossed your mind while reading this:
    &lt;ul&gt;
      &lt;li&gt;Undergrad TAs?&lt;/li&gt;
      &lt;li&gt;Head TAs??&lt;/li&gt;
      &lt;li&gt;600 students???&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Induced_demand&quot;&gt;Induced demand&lt;/a&gt;: I didn’t include this in the list because there isn’t a good way to measure its effect, but I suspect that even if we continued to make the assignments easier, the effect on how many students need help wouldn’t decrease proportionally. That is to say, students that might have avoided/dropped the class because of limited support availability and long office hours waits would remain enrolled, and so the amount of support needed would stay roughly the same. A class’s reputation for difficulty is a surprisingly big factor in who takes it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you’re in the mood to doom scroll:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dynomight.net/teaching/&quot;&gt;Teaching is a slow process of becoming everything you hate&lt;/a&gt;: A very relateable read (although I did genuinely enjoy teaching!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.pamelafox.org/2022/05/my-experience-as-unit-18-berkeley.html&quot;&gt;My experience as a Unit-18 Berkeley Lecturer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Welp, I zoned out for another year. Luckily I’m pretty sure no one reads this stuff, except maybe CS 186 students who want to investigate the TA who answers debugging questions at 4 AM instead of teaching a discussion section. Which brings us to today’s topic!</summary></entry><entry><title type="html">Blursing Python</title><link href="http://localhost:4000/2019/12/06/blursed-python/" rel="alternate" type="text/html" title="Blursing Python" /><published>2019-12-06T00:00:00-08:00</published><updated>2019-12-06T00:00:00-08:00</updated><id>http://localhost:4000/2019/12/06/blursed-python</id><content type="html" xml:base="http://localhost:4000/2019/12/06/blursed-python/">&lt;p&gt;&lt;em&gt;“&lt;strong&gt;blursed&lt;/strong&gt; (adj): Simultaneously blessed and cursed by a situation, object, person, etc…”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=Blursed&quot;&gt;Urban Dictionary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently discovered something incredibly blursed while reading an article by &lt;code class=&quot;highlighter-rouge&quot;&gt;faehnrick&lt;/code&gt; in &lt;a href=&quot;https://pagedout.institute/&quot;&gt;PagedOut&lt;/a&gt; Volume 2.
&lt;!--more--&gt;  In an article titled “Abusing C - Have Fun!” on the topic of obsfuscated C code it’s demonstrated that this sort of thing is valid C:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The interesting bit is inside the for loop, where it appears we’re indexing &lt;em&gt;into&lt;/em&gt; an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; &lt;em&gt;with&lt;/em&gt; a c-string. Intuitively this doesn’t make any sense, so maybe it’s just one of the infinite number of things in C that can compile but will just result in garbage. Checking the output we get:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ah, yup garba – wait what? What happened here? The key is to realize that brackets are really just syntactic sugar in the sense that each of the following prints are equivalent:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Normal usage
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Without the syntactic sugar
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Commute!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Oh no
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that’s C, but this article is about blursing Python. Surely Python wouldn’t let something like this fly, right?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Blursed?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;SyntaxWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'int'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;perhaps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comma&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'int'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Apparently Python 3.8 gives friendly little advice now :O&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And as expected errors as &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; objects aren’t allowed to be indexed into. Unless…?&lt;/p&gt;

&lt;p&gt;The way Python decides whether or not you can index (or subscript, as the error message uses) into something is if the class has a &lt;code class=&quot;highlighter-rouge&quot;&gt;__getitem__&lt;/code&gt; method. You may recognize this as a “dunder” or “magic” method, which is how Python implements operator overloading. More on that &lt;a href=&quot;https://www.geeksforgeeks.org/dunder-magic-methods-python&quot;&gt;here&lt;/a&gt;. So, hypothetically, if we implemented this function for the int class we could get the behavior we wanted, right?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getitem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__getitem__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getitem&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t set attributes of built-in/extension type '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well shoot, it looks like we aren’t allowed to assign any attributes into built-in types (int, float, complex, bool, etc…). So we’re stuck, right? This is where I’ll admit that I didn’t go out of my way to introduce this abomination of a “feature” into Python. As a matter of fact, the method comes from a separate attempt to introduce a different, slightly less abominable feature into Python.&lt;/p&gt;

&lt;p&gt;Let’s open a new stack frame for this…&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;frame-1-a-slightly-less-abominable-use-case&quot;&gt;Frame 1: A slightly less abominable use case&lt;/h2&gt;

&lt;p&gt;Python is my go to tool for doing calculations because of its builtin implementation of big integers. Last semester I took &lt;a href=&quot;https://inst.eecs.berkeley.edu/~cs188/&quot;&gt;CS188 (Intro to AI)&lt;/a&gt; which loved more than anything to give assignments that made you &lt;em&gt;be&lt;/em&gt; a rational agent, i.e. chugging through hand calculations of cost and reward functions. Needless to say I trust the Python interpreter to do calculations more correctly than I ever could. Sadly I ran into a problem almost non-stop:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;188&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since most of the time I was just copying in whatever I had written in my notes down verbatim I ended up keeping the traditional “2(1 + 1) = 2 * (1 + 1)” syntax of normal arithmetic. Python of course expects the asterisk to be there to indicate multiplication, so we get:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;SyntaxWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'int'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;perhaps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comma&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'int'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But wait, this looks familiar doesn’t it? The first time the interpreter was peeved because we were subscripting an int, and here it’s peeved that we’re trying to call it. After all “188(…)” to the interpreter just looks like we’re trying to “call” the constant 188 as a function. So we still have the same problem before. So how to get around this?&lt;/p&gt;

&lt;p&gt;Earlier the main problem was that we can’t assign new attributes to built-in types. But what about subclasses of built-in types? For example, this totally works:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;callable_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callable_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;186&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output: 107694&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course casting every integer (or numeric type in general) is quite a mouthful. If only there were a way to somehow &lt;em&gt;modify the file before running it to slip in these casts implicitly&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s open a new stack frame for this…&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;frame-2-future-fstrings&quot;&gt;Frame 2: Future Fstrings&lt;/h2&gt;

&lt;p&gt;Fstrings are a feature introduced in Python 3.6 that lets you do this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dresden&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello {location}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output: Hello Dresden!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This isn’t backwards compatible with earlier versions of Python:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Anaconda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Aug&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Xanadu&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello {location}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello {location}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;SyntaxError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which makes sense, even if earlier versions could let the &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; prefix to strings slide, they would have no idea how to interpret the format notation. And yet, it seems that there’s a package which allows this kind of compatability. The package &lt;a href=&quot;https://github.com/asottile/future-fstrings&quot;&gt;future-fstring&lt;/a&gt; allows for older versions of python to use fstrings. After installing you can run this file as expcted:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: future_fstrings -*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ithaca&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello {location}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Output: Hello Ithaca!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What’s going on here? Let’s briefly dive into a new topic:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;frame-3-codecs&quot;&gt;Frame 3: Codecs&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;codec&lt;/code&gt; is short for &lt;strong&gt;co&lt;/strong&gt;der &lt;strong&gt;dec&lt;/strong&gt;oder. Codecs crop up a lot in audio and video streams to compress information by encoding it on the senders end and decoding it on the receivers end, overall decreasing the network cost. In Python codecs are used to interpret the text passed into the script. You may have encountered this before when working with python2, which by default uses the ascii encoding. So something like this will happen by default:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ö&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ö&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;SyntaxError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may have noticed that for compatibility with python3, which uses utf-8 by default, Python files will occasionally lead off like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf8 -*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ö&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python will read off the codec specified and use it to decode the file from raw bytes into the tokens that will ultimately end up in the AST.&lt;/p&gt;

&lt;p&gt;We can pop out of the topic of codecs now&lt;/p&gt;

&lt;h2 id=&quot;frame-3-end&quot;&gt;Frame 3: End&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Back to frame 2, on future_fstrings.&lt;/p&gt;

&lt;p&gt;So how does this tie in with future_fstrings? It turns out that future_fstring just adds a new codec that decodes as utf8 would, and then modifies the result before returning:&lt;/p&gt;

&lt;p&gt;In: &lt;a href=&quot;https://github.com/asottile/future-fstrings/blob/master/future_fstrings.py&quot;&gt;future_fstrings.py&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tokenize_rt&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Tokenizer&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Use regular utf8 codec to decode&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenize_rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_to_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Tokenize the result&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Modify tokens&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenize_rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens_to_src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Return modified tokens as src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After passing this codec over the raw source, this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: future_fstrings -*-&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'world'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello {thing}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is seen by the interpreter as:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: future_fstrings -*-&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'world'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, we can pop out of frame 2 now.&lt;/p&gt;

&lt;h2 id=&quot;frame-2-end&quot;&gt;Frame 2: End&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Back to frame 1, where we’re trying to find a way to slip in casts to &lt;code class=&quot;highlighter-rouge&quot;&gt;callable_int&lt;/code&gt; around regular &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;. Well, using the technique from future_fstrings this can be accomplished fairly easily. With a new encoding we can do:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenize_rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_to_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'NUMBER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Wrap any tokens that look like numeric literals&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tokenize_rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_to_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;callable_int({})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenize_rt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens_to_src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After installing the new codec:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: callable_numerics -*-&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;186&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is passed to the interpreter as&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: callable_ints -*-&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;callable_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;186&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callable_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is evaluated as 107694 without complaint! Time to pop one last time:&lt;/p&gt;

&lt;h2 id=&quot;frame-1-end&quot;&gt;Frame 1: End&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Back to frame 0! This whole frame business is a play on call stacks, which I’ve found have sometimes been an apt metaphor for discussions that end up having to nest deeper and deeper into “moderately related tangents” and slowly get resolved outwards into the original topic. And we’re finally back to our original goal: blursing Python!&lt;/p&gt;

&lt;p&gt;Well, at this point it should be fairly straightforward to blurse python. We adjust callable_int with a new dunder method:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;blursedint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we modify the codec we can get the behavior we want!&lt;/p&gt;

&lt;p&gt;Of course there are some caveats that implementation wise aren’t as interesting to talk about, however are present in the source including a not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blursing the other numeric types in python, &lt;code class=&quot;highlighter-rouge&quot;&gt;complex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Making blurses “contagious”, i.e. 123(456)(789) should still be valid! So 123*456 should also be blursed&lt;/li&gt;
  &lt;li&gt;Lots and lots of decorators… Which I’ve found have plenty of &lt;a href=&quot;/Decorators&quot;&gt;(ab)use cases&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;An &lt;strong&gt;extra&lt;/strong&gt; blursed implementation of float&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final result runs the following file:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: blursed -*-&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Multiplications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;238&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Indexing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Konichiwhat's up&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ohno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Float indexing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ohno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ohno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;why&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;why&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Outputing this (try to guess what’s going on with float indexing!):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Multiplications
20289024.0
2816

Indexing
w
h
a
t

Float indexing
2.7
0.5
18.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully you now have a good idea of what I mean when I say blursed! The source for this can be found &lt;a href=&quot;https://github.com/ckw017/blursed&quot;&gt;here&lt;/a&gt;. If you want to experience this travesty firsthand, Python 3.5+ should be able to take use this properly after running &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install blursed&lt;/code&gt;. And as always, thanks for reading.&lt;/p&gt;</content><author><name></name></author><category term="Python" /><category term="Fun" /><summary type="html">“blursed (adj): Simultaneously blessed and cursed by a situation, object, person, etc…” – Urban Dictionary I recently discovered something incredibly blursed while reading an article by faehnrick in PagedOut Volume 2.</summary></entry><entry><title type="html">Rock, Paper, Scissors, Fire, Water, Grass</title><link href="http://localhost:4000/2019/01/01/Rock-Paper-Scissors/" rel="alternate" type="text/html" title="Rock, Paper, Scissors, Fire, Water, Grass" /><published>2019-01-01T00:00:00-08:00</published><updated>2019-01-01T00:00:00-08:00</updated><id>http://localhost:4000/2019/01/01/Rock-Paper-Scissors</id><content type="html" xml:base="http://localhost:4000/2019/01/01/Rock-Paper-Scissors/">&lt;p&gt;For those unfamiliar with the finer details of competitive Pokemon, it’s basically just a fancy version of rock, paper, scissors. While RPS gives each player 3 options, a turn in pokemon consists of around 4-9 possibilities for each player. Each player then reveals his or her choice simultaneously, and the results of their actions play out. This makes it different than games like Tic Tac Toe, Chess, or Go where only one player is “in control” at a time, and instead more like a game of Poker where two players are forced to reveal their hands at the same time.&lt;/p&gt;

&lt;p&gt;If you’ve heard of Pokemon, you probably know that the game has a type system (&lt;a href=&quot;https://en.wikipedia.org/wiki/Type_system&quot;&gt;no, not that kind&lt;/a&gt;). For example, the franchise mascot Pikachu is an electric type, while the fan favorite Charizard is a combination of flying and fire type. Different attacks are also assigned types. As you might expect, a water type move does extra damage (super effective) when used against a fire type opponent, while an electric type moves do no damage to ground types. In this sense, the game really is just an elaborate version of rock, paper, scissors, but with 18 different objects (weapons? implements? tchotchkes?) instead of three.&lt;/p&gt;

&lt;h2 id=&quot;monotype&quot;&gt;Monotype&lt;/h2&gt;

&lt;p&gt;A normal battle can take place between any combination of the 600+ Pokemon allowed in competitive matches, with each player being allowed to choose up to six. The types of battles I was interested are placed under a constraint known as “Monotype,” which is to say that all Pokemon must share a type. For example, a team consisting of Pikachu (electric), Voltorb (electric), and Magneton (electric/steel) is allowed, since all members are electric type (such a team is called “mono electric”). Conversely, a team consisting of Squirtle (water) and Charmander (fire) is disallowed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://play.pokemonshowdown.com/sprites/xyani/pikachu-original.gif&quot; alt=&quot;Pikachu&quot; /&gt;
 &lt;img src=&quot;http://play.pokemonshowdown.com/sprites/xyani/voltorb.gif&quot; alt=&quot;Voltorb&quot; /&gt;
 &lt;img src=&quot;http://play.pokemonshowdown.com/sprites/xyani/magneton.gif&quot; alt=&quot;Magneton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pikachu, Voltorb, and Magneton form a valid “Mono Electric” team&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can imagine, competitive matches in this format can be quite one-sided for certain “matchups” (combination of types against each other). For example, the matchup of Mono Water vs. Mono Fire heavily favors the player using water, but it isn’t as black as white as a game of rock, paper, scissors. Every so often, a fire teams do overcome water teams through a combination of luck and strategy. For example, some Mono Fire teams run the Pokemon Volcanion, which regains health when hit by water type attacks and knows the move &lt;em&gt;Solar Beam&lt;/em&gt;, which does heavy damage to water types. We would expect fire teams using this Pokemon to perform better on average than those without it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://play.pokemonshowdown.com/sprites/xyani/volcanion.gif&quot; alt=&quot;Volcanion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Volcanion: a Fire/Water type, that is immune to water attacks&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is just one particular case for one particular matchup of a potential 172. As you can imagine, there are all sorts of factors that actually contribute to how likely one type is likely to beat another, ranging anywhere from team composition, to special abilities, to esoteric game mechanics. Attempting to quantify this is where the fun part begins.&lt;/p&gt;

&lt;h2 id=&quot;collecting-data&quot;&gt;Collecting Data&lt;/h2&gt;
&lt;p&gt;To start off, I decided to collect data from the popular online Pokemon simulator, &lt;a href=&quot;https://pokemonshowdown.com/&quot;&gt;Pokemon Showdown&lt;/a&gt;. Showdown typically has ~10,000 users online during the day and upwards of ~1000 battles taking place at any given moment. During the time I spent collecting data, I found that roughly 12,000 monotype battle took place on a daily basis.&lt;/p&gt;

&lt;p&gt;To collect data, I had to create a bot that hooked into Showdown’s websocket interface and listened in onto all public battles. Chat bots that interact with the website’s chat rooms already existed, however were heavily specialized for chat based interactions and were exclusively written for Node.js. I decided to write my own client in Python, which ended up being great practice with Python 3’s async features and Object Relational Managers (all of the data is currently being stored in a PostgreSQL backend.).&lt;/p&gt;

&lt;p&gt;There was a long, complicated, and at times frustrating step between collecting the raw data and getting out useful information. For the sake of brevity and sanity, this has been omitted.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results!&lt;/h2&gt;
&lt;p&gt;After collecting all and parsing all the data, we finally get to the my personal favorite part of this kind of process: staring at tables and hoping that it makes. Said tables can be found &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1BU5OC5Q9Xw5zcgSzIfnbDw8X4AaiKbSN1L1jfyx7llc/edit?usp=sharing&quot;&gt;here&lt;/a&gt;. The data has been split into the following groups: 1100-1300, 1300-1500, and 1500+. These refer to a matches &lt;a href=&quot;https://en.wikipedia.org/wiki/Elo_rating_system&quot;&gt;Elo rating&lt;/a&gt;, which is a metric originally invented as a chess rating system that quantifies the skill of given players in the match. The minimum possible Elo is 1000, and the highest (for my purposes) is roughly 2000. I excluded matches rated between 1000 to 1100 because these tend to contain sketchy results as the result of player’s things or hooligans writing bots that serve no purpose but to forfeit every match (this may be expanded on at a later time). Anyway, we can now look over some of the results. These are the 5 most one-sided matchups in the 1100-1300 range:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;matchup&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;win_rate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;fire vs. grass&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0.8295302013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;steel vs. ice&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0.8210023866&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fighting vs. dark&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0.7970244421&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;steel vs. fairy&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0.7966850829&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fairy vs. fighting&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0.7950310559&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;The win_rate refers to the probability that a wins in the matchup a vs. b&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As any Californian will tell you, the matchup of fire vs. grass heavily favors fire. The difference is now we know exactly how much it favors grass, and that it is in fact the worst matchup in the game for players of the 1100-1300 skill range. It is interesting to note that this matchup gets even worse with higher skill players, moving from ~83% to ~87% in the 1500+ range (this is however based on a far smaller sample size).&lt;/p&gt;

&lt;p&gt;One of the first “unintuitive” matchups comes with bug vs. ice, with bug winning at around 71% of the time. Bug and Ice are as neutral of a matchup you can get. Bug attacks do neutral damage on ice types, and ice attacks do neutral types on bug types. So what’s giving Bug its edge? Scizors. As in the Pokemon, Scizor. Scizor is Bug/Steel type with access to the steel type Bullet Punch, which always hits first. Thanks to Scizor’s special ability, Bullet Punch also does 1.5 times more damage than usual. Scizor also gets a Mega-Evolution, which in essence means it gets punch even harder. Oh, and its super effective against ice types. Oof.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://play.pokemonshowdown.com/sprites/xyani/scizor.gif&quot; alt=&quot;Scizor&quot; /&gt;
&lt;img src=&quot;http://play.pokemonshowdown.com/sprites/xyani/scizor-mega.gif&quot; alt=&quot;Scizor-Mega&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Scizor and Mega Scizor: a Steel/Bug Pokemon that can single-clawedly beat ice teams&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Pokemon really is just a fancy version of rock, paper, Scizors.&lt;/p&gt;</content><author><name></name></author><category term="Python" /><category term="Data Collection" /><category term="Game" /><summary type="html">For those unfamiliar with the finer details of competitive Pokemon, it’s basically just a fancy version of rock, paper, scissors. While RPS gives each player 3 options, a turn in pokemon consists of around 4-9 possibilities for each player. Each player then reveals his or her choice simultaneously, and the results of their actions play out. This makes it different than games like Tic Tac Toe, Chess, or Go where only one player is “in control” at a time, and instead more like a game of Poker where two players are forced to reveal their hands at the same time.</summary></entry><entry><title type="html">This title consists of two a’s, one b, tw…</title><link href="http://localhost:4000/2018/12/19/This-Title/" rel="alternate" type="text/html" title="This title consists of  two a's, one b, tw..." /><published>2018-12-19T00:00:00-08:00</published><updated>2018-12-19T00:00:00-08:00</updated><id>http://localhost:4000/2018/12/19/This-Title</id><content type="html" xml:base="http://localhost:4000/2018/12/19/This-Title/">&lt;p&gt;Full title: This title consists of two a’s, one b, two c’s, two d’s, thirty-one e’s, six f’s, four g’s, eight h’s, eleven i’s, one j, one k, three i’s, one m, eighteen n’s, seventeen o’s, one p, one q, seven r’s, twenty-eight s’s, twenty t’s, four u’s, five v’s, six w’s, three x’s, four y’s, and one z.&lt;/p&gt;

&lt;p&gt;For real! Test it out (or just take my word for it)! &lt;!--more--&gt; The title of this post is a self-describing sentence on the typographical level. Note that I specify on a typographical level, as opposed to say a “semantic meaning” level. A statement that fits that criteria would be something like “This sentence talks about itself”. You could also have a sentence that describes itself on a “word” level, such as “This sentence has seven words in it.” Yet both of these feel somehow less interesting as the title, which is a lot more “sensitive” to minor changes. For example, if you tried to change the prefix to “This is a title…”, you would of course have to say it has four i’s instead of three. But wait, well now we have thirty-three e’s, right? But “thirty-three” adds another two e’s, so do we have thirty-five? Well now we’re back down to thirty-four, but wai… And so on, ad nauseam.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xkcd.com/688/&quot;&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/self_description.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;xkcd 668, “Self-description”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I first came across this concept in Douglas Hofstadter’s anthology &lt;a href=&quot;https://en.wikipedia.org/wiki/Metamagical_Themas&quot;&gt;&lt;em&gt;Metamagical Themas: Questing for the Essence of Mind and Pattern&lt;/em&gt;&lt;/a&gt;. I would definitely recommmend it to anyone familiar with Hofstadter’s more popular work &lt;em&gt;Gödel, Escher, Bach&lt;/em&gt;, although the structure of &lt;em&gt;Metamagical Themas&lt;/em&gt; is pretty friendly to people unfamiliar with his writing style. Much like his other works, a major topic of interest is self-reference.&lt;/p&gt;

&lt;h1 id=&quot;a-linear-algebra-attempt&quot;&gt;A Linear Algebra Attempt&lt;/h1&gt;

&lt;p&gt;So how does one produce such a sentence? One approach would be to brute force it by manually running through every combination of 26 “coefficients,” capped at some value, say forty. This would mean it would take &lt;code class=&quot;highlighter-rouge&quot;&gt;40^26 == 4.5*10^41&lt;/code&gt; in the worst case scenario to find a working combination (or to discover that no such solution exists for a given “prefix”, in the case of this article “This title consists of”). This, in simple terms, would take a while. One reader of Hofstadtr’s column did in fact find a solution in this manner. Using a handful of clever optimizations and custom hardware, Lee Sallows was able to find a solution for the prefix “This pangram tallies” after only 2.5 months!&lt;/p&gt;

&lt;p&gt;That sort of runtime really begs the assertion: “There has to be a better way!” When I first attempted the problem, I felt a natural approach would be through linear algebra. The essence of these self-describing sentences is the equality in the &lt;em&gt;meaning&lt;/em&gt; of the sentence, and the &lt;em&gt;composition&lt;/em&gt; of the sentence, i.e. solve for &lt;code class=&quot;highlighter-rouge&quot;&gt;meaning == composition&lt;/code&gt;. To represent both sides of the equation, we can map each letter in the alphabet to an axis in 26-dimensional space. This isn’t unlike how in two dimensional space, we map the unit vector i to the x-axis, and j to the y-axis.&lt;/p&gt;

&lt;p&gt;To represent the &lt;em&gt;meaning&lt;/em&gt; side of the equation, we sum together the &lt;em&gt;meaning&lt;/em&gt; of each coefficient (i.e. the string “two”-&amp;gt;2, “twenty-five”-&amp;gt;25, etc…) times the constant unit vector representing the letter (“i”-&amp;gt;the unit vector in the positive direction of the i-dimension). This is better said in an example: “Three x’s, two y’s”. The evaluation of the meaning of this statement is a vector a component of length 3 in the x direction and 2 in the y direction.&lt;/p&gt;

&lt;p&gt;On the other side, we have the &lt;em&gt;composition&lt;/em&gt; of the sentence. To start, we can treat the prefix of the statement as a constant vector in our 26-dimensional character space. For example, the prefix “Prefix” is just a constant vector with components of length 1 in the p, r, e, f, i, and x directions, and 0 elsewhere. We also know that every letter is mentioned at least once, so we can add a “diagonal” vector that has a component of 1 in each direction. Finally, must add on the &lt;em&gt;composition&lt;/em&gt; of all the coefficients from the left. This would require some function f that takes in a number, and outputs a character space vector of that numbers composition. For example, f(3) should return a vector with components of 1 in the t, h, and r directions, 2 in the e direction, and 0 elsewhere.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-the-problem&quot;&gt;The problem with the problem&lt;/h2&gt;

&lt;p&gt;The downfall of this approach is rooted in the need for this function f, since it isn’t a linear operation (i.e. f(1) + f(2) != f(3)), which renders linear algebra techniques useless for solving the problem. You may have also noted that the “‘s” were not accounted for author, which relied on boolean logic that I suspected wouldn’t translate cleanly into this linear algebra approach either. It should be noted that you could use a modified version of Peano numbering as f which would be linear. In Peano’s scheme, the number zero is represented with 0, while the number one is represented as “successor of zero”, or S0. Likewise, the since two is the “successor of one” it is represented as SS0. If we cut out the postfix 0, then our “number to composition” function would be linear, but force our sentence to be read in a ssssnake-ish dialect.&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;
&lt;p&gt;So, how can a solution be found then? The answer lies in iteration. Let’s start with a simpler prefix: “The previous sentence consists of…” This transforms the problem into something of a novelty. If we put in a dumby starter sentence, such as “The previous sentence consists of one l,” then producing a new sentence describing this one is quite trivial. We just count the letters, and then output a new sentence along the lines of “The previous sentence consists of one d, one y…” A new sentence can then be generated to describe this one, thus forming an endless list of sentences describing their predecessors. I say endless here, but intuitively we know that these sentences occupy a finite set of points in character space. Paired with the fact that our successor function is deterministic, we can conclude that at some point we run into a cycle.&lt;/p&gt;

&lt;p&gt;This has an interesting implication: any “starter” input will eventually collapse into a loop given enough applications of our successor function. Our goal to find a self-describing sentence is instead to find a cycle of length one given a specific prefix. So, if we just generate random starting points and continue applying the successor function until we get “sucked into” a loop of length one. One way to visualize this is to imagine a sea full of whirlpools. If we wanted to find eye of an “ideal” whirlpool, which in our analogy will be one with an eye with diameter of say, 2 inches, we could check every 2x2 inch square of surface on the sea and hope to run into it. Alternatively, we could airdrop thousands of 2 inch buoys into the water. The buoy’s will naturally find their ways to the eye of every whirlpool, and if we’re lucky, one of them will find its way to the center of our ideal one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://proxy.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn.bulbagarden.net%2Fupload%2F1%2F19%2FHGSS_Whirl_Islands-Day.png&amp;amp;f=1&quot; alt=&quot;Whirl Islands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A sea of whirlpools. Image source: “Whirl Islands” from Pokemon HeartGold &amp;amp; SoulSilver&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The contents of this paragraph is left as an exercise to the reader. This concluding sentence consists of ___?&lt;/p&gt;</content><author><name></name></author><category term="Fun" /><category term="Meta" /><summary type="html">Full title: This title consists of two a’s, one b, two c’s, two d’s, thirty-one e’s, six f’s, four g’s, eight h’s, eleven i’s, one j, one k, three i’s, one m, eighteen n’s, seventeen o’s, one p, one q, seven r’s, twenty-eight s’s, twenty t’s, four u’s, five v’s, six w’s, three x’s, four y’s, and one z. For real! Test it out (or just take my word for it)!</summary></entry><entry><title type="html">61B Roguelike Game</title><link href="http://localhost:4000/2018/07/02/61B-Roguelike/" rel="alternate" type="text/html" title="61B Roguelike Game" /><published>2018-07-02T00:00:00-07:00</published><updated>2018-07-02T00:00:00-07:00</updated><id>http://localhost:4000/2018/07/02/61B-Roguelike</id><content type="html" xml:base="http://localhost:4000/2018/07/02/61B-Roguelike/">&lt;p&gt;While the previous class related post was on the first project of CS61A, this is skipping straight to the second project of CS61B. There were 4 or 5 projects in between the two, but my main problem with them was that for the most part they were nothing more than fancy fill in the blank exercises. This project changed up that format by giving a ton of freedom to the students in terms of implementation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This won’t really go into as much technical detail as other posts, since I’m obligated not to share too much information on how I implemented stuff for the sake of academic integrity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The objective of the project was to create a &lt;em&gt;roguelike&lt;/em&gt; game. According to Wikipedia, a roguelike is defined by “procedurally generated levels, turn-based gameplay, tile-based graphics, and permanent death of the player character.” In previous projects, we were usually handed a skeleton outline of the what we had to do, along with a predefined specification for how everything should be implemented. I had major qualms with this style of assignment, mainly because it locked you in to a single approach to problem solving, and often times the method headers gave away the tricks to the problem. But it was more or a less a necessary evil: there were 700+ students, and the autograder had to work with a predefined functions and classes to test.&lt;/p&gt;

&lt;p&gt;That’s why Project 2 was so exciting! The only rigid requirements we had were to use the graphics library that was provided. As for the more abstract goals, we were asked to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Implement a player character with some form of movement&lt;/li&gt;
  &lt;li&gt;Randomly generated rooms and hallways&lt;/li&gt;
  &lt;li&gt;The ability to interact with the environment&lt;/li&gt;
  &lt;li&gt;A condition to win the game.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since this isn’t going to be a technical post anyway, I guess I’ll go a bit into my background in video games. The two big influencers for my game were &lt;em&gt;Pokemon Mystery Dungeon&lt;/em&gt;, and &lt;em&gt;Realm of the Mad God (RotMG)&lt;/em&gt;, both 2D dungeon crawling games with roguelike aspects. Two of my favorite parts of the dungeons featured in RotMG is that while the game tells you exactly &lt;em&gt;where&lt;/em&gt; you should be headed, the labyrinth-like dungeon only provides one path to get there – everything else is just a dead end. When I was thinking up how I might implement this, I was struck by inspiration, which ended up going not being valid, and then by a Discrete Math exam. During some last minute review for that exam, I realized that the dungeons in RotMG were actually just an implementation of my third favorite type of graph: the tree. &lt;em&gt;(My first favorite is the n-dimensional hypercube graph, followed shortly by directed acyclic)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rogue/rotmg_abyss.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An example layout for &lt;em&gt;The Abyss of Demons&lt;/em&gt;, a dungeon that I spent too much time grinding in in RotMG.&lt;/p&gt;

&lt;p&gt;The strategy to make the dungeon was to generate a bunch of rooms, and the connect them with hallways until they formed a tree. If that sounds vague, its because it is. I really wish I could go into more detail here, but I can’t. I will say that the trick to forming the tree was to make sure each room wasn’t already connected to another before joining them. This is because if we treat each room as a node in a graph, then connecting two previously connected nodes would form a cycle, ruining the tree property of the graph. To check for connectedness, I ended up “inventing” a special class to keep track of what was already linked, only to be find out later in lecture that it was called a Disjoint Set and that it had already been figured out long before I came around :(&lt;/p&gt;

&lt;p&gt;Anyway, the last step was to come up with a theme for the game. I thought it would be funny to name the game after Dwinelle Hall, a building on campus rumored to have been designed by two disagreeable architects. For a gameplay video, check out &lt;a href=&quot;https://www.youtube.com/watch?v=HFTrWrPsLMQ&quot;&gt;my extra credit video&lt;/a&gt;, or don’t! Anyway, that’s all for this post. Sorry about the lack of code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rogue/dwinelle.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Depiction of Dwinelle Hall, courtesy of the Daily Kale.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Java" /><category term="Game" /><category term="Berkeley" /><summary type="html">While the previous class related post was on the first project of CS61A, this is skipping straight to the second project of CS61B. There were 4 or 5 projects in between the two, but my main problem with them was that for the most part they were nothing more than fancy fill in the blank exercises. This project changed up that format by giving a ton of freedom to the students in terms of implementation.</summary></entry><entry><title type="html">Hog Contest (Part 2)</title><link href="http://localhost:4000/2018/06/15/Hog-Contest-2/" rel="alternate" type="text/html" title="Hog Contest (Part 2)" /><published>2018-06-15T00:00:00-07:00</published><updated>2018-06-15T00:00:00-07:00</updated><id>http://localhost:4000/2018/06/15/Hog-Contest-2</id><content type="html" xml:base="http://localhost:4000/2018/06/15/Hog-Contest-2/">&lt;p&gt;Picking up where we left off from Part 1, so far we’ve found a way to generate an optimal strategy
for the game of Hog by recursively calculating which moves would be the best. While effective, it certainly
wouldn’t have made for much of a contest if everyone who came up with this approach were tied for first.
Luckily, the professor was likely aware of this possibility, and threw a wrench into the probabilistic
method by forcing the strategies to work with &lt;em&gt;incomplete information.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“&lt;strong&gt;Time Trot&lt;/strong&gt;: A turn involves a player rolling dice, and each turn is numbered, starting from 0. If a player
chooses to roll a number of dice k on turn n, and n % 8 == k, then that player gets an extra turn immediately
after the current turn. However, a player cannot get an extra turn immediately after an extra turn.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The new rule was fairly simple, and would be easy to implement as a person. A human player could keep track of
what turn it is, and use their extra rolls as they wished. However, under the contest rules, the strategy
“must be a deterministic function of the players’ scores and cannot track the turn number or previous actions.”&lt;/p&gt;

&lt;p&gt;Now that the strategies were forced to work with incomplete information, the contest was a lot more interesting.
My first thought was to adapt the original probabilistic method as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Calculate the best possible move to make against a given strategy given a set of scores &lt;em&gt;and&lt;/em&gt; the current turn number.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Calculate the probability that it is a certain turn number for each possible turn (0 to 7), for each possible pair of scores
(0 to 99, 0 to 99)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Normalize each turn number and roll by the probability of it leading to a winning game&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the best roll by adding up the normalized turn numbers and their rolls&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;TODO: Put in visualization of how data interacts.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There was of course a major flaw in the second step: to calculate the probability that a given set of scores would be a certain
turn number, you needed to simulate a game between the base strategy and the strategy you were currently making. But the strategy
being was made wasn’t finished yet! Uh oh. It looks like we’ll need to use an approximation: the old optimal strategy.&lt;/p&gt;

&lt;p&gt;So, using the optimal strategy as the seed, as well as the approximation strategy, the new strategy reached a win rate of
0.503, beating the optimal strategy 3 tenths of a percent more often than not. Surely we could do better? The ideal (but unachievable)
win rate, given complete information, was around 0.58. Was there a way to get closer to that?&lt;/p&gt;

&lt;p&gt;The answer was: sorta. By rerunning the algorithm, this time using the output of the previous run as the approximation strategy, it
actually ended up doing worse. But by repeatedly feeding the output back in like this gradual progress was made towards the ideal.
After about 300+ iterations, the best win rate was around 0.537, almost halfway closer to the ideal than in the first iteration.&lt;/p&gt;

&lt;iframe width=&quot;704&quot; height=&quot;438&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vSHv20ef9STEktZIhsttsDrPg-5DBtHDcbIfyTbquh56xGqkVaOt5ZdGMhRZ5rx_AA16l3rpf198zzZ/pubchart?oid=1161975059&amp;amp;format=interactive&quot;&gt;
  &lt;/iframe&gt;

&lt;p&gt;This was about as far as I got before I realized the contest deadline was going to make things tricky. To get that 0.537 win rate took a few
hours, and a couple of attempt were ruined midway from problems with the memoization system I was using running out of memory. If I had more time,
and I may look into these approaches now that I do have time, I would have tried out a few different approaches. The main ones that come to mind are
creating what would be the optimal strategy if we did have complete information then “flattening” down into a 2D strategy, or doing an incremental
approach where only a few outputs are changed each time. If I ever get around to that, I’ll make a part three to this saga, but for now that’s all for hog!&lt;/p&gt;</content><author><name></name></author><category term="Python" /><category term="Berkeley" /><summary type="html">Picking up where we left off from Part 1, so far we’ve found a way to generate an optimal strategy for the game of Hog by recursively calculating which moves would be the best. While effective, it certainly wouldn’t have made for much of a contest if everyone who came up with this approach were tied for first. Luckily, the professor was likely aware of this possibility, and threw a wrench into the probabilistic method by forcing the strategies to work with incomplete information.</summary></entry></feed>